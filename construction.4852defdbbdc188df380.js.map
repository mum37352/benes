{"version":3,"file":"construction.4852defdbbdc188df380.js","mappings":"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","sources":["webpack://react-ts-tailwind-starter/webpack/runtime/chunk loaded","webpack://react-ts-tailwind-starter/./src/common/Colors.tsx","webpack://react-ts-tailwind-starter/./src/construction/Graph.ts","webpack://react-ts-tailwind-starter/./src/construction/Construction.tsx","webpack://react-ts-tailwind-starter/./src/construction/page.tsx","webpack://react-ts-tailwind-starter/./src/common/Permutation.tsx","webpack://react-ts-tailwind-starter/webpack/bootstrap","webpack://react-ts-tailwind-starter/webpack/runtime/define property getters","webpack://react-ts-tailwind-starter/webpack/runtime/hasOwnProperty shorthand","webpack://react-ts-tailwind-starter/webpack/runtime/runtimeId","webpack://react-ts-tailwind-starter/webpack/runtime/jsonp chunk loading","webpack://react-ts-tailwind-starter/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import * as d3 from \"d3\";\n\n// Based on https://github.com/vv9k/vim-github-dark\nexport let backgroundColor = \"#161b22\";\nexport let inputColor = \"#faa356\";\nexport let outputColor = \"#a2d2fb\";\nexport let midColor = \"#ecf2f8\";\nexport let topColor = \"#7ce38b\";\nexport let bottomColor = \"#cea5fb\";\n\n// https://observablehq.com/@harrystevens/roll-your-own-color-palette-interpolator\nfunction interpolatePalette(palette : string[]) {\n  return (t: number) => d3.piecewise(d3.interpolateLab, palette)(Math.min(Math.max(0, t), 1));\n}\n\nexport function getColorScale(resolution: number) {\n  return d3.scaleSequential().domain([0,resolution]).interpolator(interpolatePalette([\"#fa7970\", \"#ecf2f8\", \"#faa356\", \"#7ce38b\", \"#a2d2fb\", \"#77bdfb\", \"#cea5fb\"]));\n}","import { Vec2 } from \"@/common/PermWidget\";\nimport * as d3 from \"d3\";\n\nexport let width = 928;\nexport let height = 680;\n\nexport enum GraphNodeType {\n  Input,\n  Output,\n  Internal\n}\n\nexport interface GraphNode extends d3.SimulationNodeDatum {\n  type: GraphNodeType,\n  key: string\n}\n\nexport type GraphEdge = d3.SimulationLinkDatum<GraphNode>;\n\nexport class Graph {\n  constructor(ioHeight: number) {\n    this.xScale = d3.scaleLinear([-6, +6], [0, width]);\n    this.yScale = d3.scaleLinear([-1, ioHeight], [0, height]);\n\n    this.ioHeight = ioHeight;\n\n    this.inputs = [];\n    for (let inputIdx = 0; inputIdx < ioHeight; inputIdx++) {\n      let [x, y] = this.getInputPos(inputIdx);\n      let node : GraphNode = {key: \"in_\"+inputIdx, type: GraphNodeType.Input, fx: x, fy: y};\n      this.inputs.push(node);\n    }\n\n    this.outputs = [];\n    for (let outputIdx = 0; outputIdx < ioHeight; outputIdx++) {\n      let [x, y] = this.getOutputPos(outputIdx);\n      let node : GraphNode = {key: \"out_\"+outputIdx, type: GraphNodeType.Output, fx: x, fy: y};\n      this.outputs.push(node);\n    }\n\n    this.nextId = 0;\n\n    this.nodes = [...this.inputs, ...this.outputs];\n    this.edges = [];\n\n    // Totally valid since we have no edges.\n    this.routingLut = new Map();\n  }\n\n  static makeCompleteBipartiteGraph(ioHeight: number) {\n    let graph = new Graph(ioHeight);\n\n    \n    for (let inputIdx = 0; inputIdx < ioHeight; inputIdx++) {\n      for (let outputIdx = 0; outputIdx < ioHeight; outputIdx++) {\n        let newEdge: GraphEdge = {\n          source: graph.inputs[inputIdx],\n          target: graph.outputs[outputIdx]\n        };\n        graph.edges.push(newEdge);\n      }\n    }\n    \n    graph.routeAllPermutations();\n\n    return graph;\n  }\n\n  getInputPos(outputIdx: number): Vec2 {\n    return [this.xScale(-5), this.yScale(outputIdx)];\n  }\n\n  getOutputPos(outputIdx: number): Vec2 {\n    return [this.xScale(+5), this.yScale(outputIdx)];\n  }\n\n  foreachEdgeSubset(doSomething: Function) {\n    let binaryCounter = new Array(this.edges.length).fill(false);\n\n    // Foreach subset.\n    for (;;) {\n      if (doSomething(binaryCounter)) {\n        // The operation succeeded, we can stop.\n        return true;\n      }\n\n      // Try to increment the counter.\n      let incSucc = false;\n      for (let i = 0; i < binaryCounter.length && !incSucc; i++) {\n        if (!binaryCounter[i]) {\n          incSucc = true;\n        }\n        binaryCounter[i] = !binaryCounter[i];\n      }\n      if (!incSucc) {\n        // The counter overflowed, we have seen all subsets.\n        return false;\n      }\n    }\n  }\n\n  // If successfull, return the valences, else return null.\n  hasNoValence3Nodes(edgeSubset: Array<boolean>) {\n    let nodeValences = new Map();\n\n    function bumpValence(node: GraphNode) {\n      let current = nodeValences.get(node);\n      if (!current) {\n        current = 1;\n      } else {\n        current++;\n      }\n      nodeValences.set(node, current);\n\n      return current;\n    }\n\n    for (let edgeIdx = 0; edgeIdx < edgeSubset.length; edgeIdx++) {\n      if (edgeSubset[edgeIdx]) {\n        let edge = this.edges[edgeIdx];\n\n        let valenceA = bumpValence(edge.source as GraphNode);\n        let valenceB = bumpValence(edge.target as GraphNode);\n\n        if (valenceA > 2 || valenceB > 2) {\n          return null;\n        }\n      }\n    }\n\n    return nodeValences;\n  }\n\n  routeAllPermutations(): Map<string, GraphNode[][]> {\n    // Indexed by stringified permutation luts.\n    let routingLut = new Map<string, GraphNode[][]>();\n    this.foreachEdgeSubset((edgeSubset: Array<boolean>) => {\n      let isVertical = true;\n      for (let edgeIdx = 0; edgeIdx < edgeSubset.length; edgeIdx++) {\n        \n        if (edgeSubset[edgeIdx] !== ((edgeIdx % this.ioHeight) === Math.floor(edgeIdx / this.ioHeight))) {\n          isVertical = false;\n        }\n      }\n      if (isVertical) {\n        //debugger;\n      } else {\n        //return false;\n      }\n\n      // TODO(optimize): We don't need a full recomputation of the valences here.\n      let valences = this.hasNoValence3Nodes(edgeSubset);\n      if (!valences) {\n        return false;\n      }\n\n      // This is a special subgraph, it is a collection of vertex-disjoint paths.\n\n      // Make sure the input and output nodes are terminal and being connected.\n      for (let inputIdx = 0; inputIdx < this.ioHeight; inputIdx++) {\n        if (valences.get(this.inputs[inputIdx]) !== 1) {\n          return false;\n        }\n      }\n\n      for (let outputIdx = 0; outputIdx < this.ioHeight; outputIdx++) {\n        if (valences.get(this.outputs[outputIdx]) !== 1) {\n          return false;\n        }\n      }\n\n      // Let's simultaneously record the route in a more user-friendly format, and find out\n      // if it corresponds to a permutation. (We still have the possibility of input paths not reaching outputs)\n      let permutationLut = [];\n      let permutationPaths = [];\n      for (let inputIdx = 0; inputIdx < this.ioHeight; inputIdx++) {\n        let path: GraphNode[] = [this.inputs[inputIdx]];\n        // Each iteration of the loop adds one node to the path.\n        for (;;) {\n          // Find all edges incident w/ the last node in the path.\n          let lastNode = path.at(-1) as GraphNode;\n          let penultimateNode = path.at(-2);\n          let incidentEdgeIndices = this.incidentEdgeIndices(lastNode);\n\n          let foundNewPathNode = false;\n          for (let incidentEdgeIdx of incidentEdgeIndices) {\n            // Check if the incident edge is in the subset.\n            if (edgeSubset[incidentEdgeIdx]) {\n              let edge = this.edges[incidentEdgeIdx];\n              let adjNode = this.getOppositeEdgeNode(edge, lastNode);\n              // Don't go back.\n              if (adjNode !== penultimateNode) {\n                path.push(adjNode);\n                // There is at most one incident edge in the subset.\n                foundNewPathNode = true;\n                break;\n              }\n            }\n          }\n\n          if (!foundNewPathNode) {\n            // We have retraced the entirety of the path.\n            break;\n          }\n        }\n\n        // Now check if the path terminates at an output node.\n        let pathIsSane = false;\n        for (let outputIdx = 0; outputIdx < this.ioHeight; outputIdx++) {\n          let node = this.outputs[outputIdx];\n          let lastNode = path.at(-1) as GraphNode;\n          if (lastNode === node) {\n            permutationLut.push(outputIdx);\n            pathIsSane = true;\n            break;\n          }\n        }\n\n        if (!pathIsSane) {\n          // Ditch the entire subset.\n          return false;\n        }\n\n        permutationPaths.push(path);\n      }\n\n      routingLut.set(permutationLut.toString(), permutationPaths);\n\n      // Return false, since we want to route all permutations.\n      return false;\n    });\n\n    this.routingLut = routingLut;\n    return routingLut;\n  }\n\n  getOppositeEdgeNode(edge: GraphEdge, node: GraphNode): GraphNode {\n    if (edge.source === node) {\n      return edge.target as GraphNode;\n    } else {\n      return edge.source as GraphNode;\n    }\n  }\n\n\n  // Old implementation (using a backtracking approach), does not yet seem to work. Abandoned following discussions w/ Prof RC.\n  /*\n  routePermutation(perm: Permutation) {\n    let paths: GraphNode[][] = [];\n    let visitedVerts = new Set<GraphNode>();\n    let success = this.routePermutation_recurse(perm, 0, paths, visitedVerts);\n\n    return success ? paths : undefined;\n  }\n\n  routePermutation_recurse(perm: Permutation, pathIdx: number, paths: GraphNode[][], visitedVerts: Set<GraphNode>) {\n    let dst = this.outputs[perm.lut[pathIdx]];\n\n    let newPath : GraphNode[] = [];\n    type StackEntry = {node: GraphNode, pathIdx: number};\n    let stack : StackEntry[] = [{node: this.inputs[pathIdx], pathIdx: 0}];\n\n    for (;;) {\n      let atEntry = stack.pop();\n\n      if (!atEntry) {\n        break;\n      }\n\n      // Truncate.\n      newPath.length = atEntry.pathIdx;\n      newPath.push(atEntry.node);\n\n      if (visitedVerts.has(atEntry.node)) {\n        continue;\n      }\n\n      visitedVerts.add(atEntry.node);\n\n      if (atEntry.node === dst) {\n        paths.push(newPath);\n\n        if (pathIdx < this.ioHeight - 1) {\n          if (this.routePermutation_recurse(perm, pathIdx + 1, paths, visitedVerts)) {\n            return true;\n          }\n\n          paths.pop();\n        } else {\n          return true;\n        }\n      }\n\n      newPath.push();\n\n      let neighbors = this.adjacentVerts(atEntry.node);\n      for (let neighbor of neighbors) {\n        stack.push({node: neighbor, pathIdx: newPath.length});\n      }\n    }\n\n    // Could not find a path.\n    return false;\n  }\n    */\n\n  // WARNING: Expensive, linear in the # of edges.\n  adjacentVerts(node: GraphNode) : GraphNode[] {\n    let result: GraphNode[] = [];\n\n    for (let edge of this.edges) {\n      if (edge.source === node) {\n        result.push(edge.source);\n      } else if (edge.target === node) {\n        result.push(edge.target);\n      }\n    }\n\n    return result;\n  }\n\n  // WARNING: Expensive, linear in the # of edges.\n  incidentEdgeIndices(node: GraphNode) : number[] {\n    let result: number[] = [];\n\n    for (let edgeIdx = 0; edgeIdx < this.edges.length; edgeIdx++) {\n      let edge = this.edges[edgeIdx];\n      if (edge.source === node) {\n        result.push(edgeIdx);\n      } else if (edge.target === node) {\n        result.push(edgeIdx);\n      }\n    }\n\n    return result;\n  }\n\n  getNextId() {\n    return this.nextId++;\n  }\n\n  nextId: number;\n\n  xScale: d3.ScaleLinear<number, number>;\n  yScale: d3.ScaleLinear<number, number>;\n\n  ioHeight: number;\n  inputs: GraphNode[];\n  outputs: GraphNode[];\n  nodes: GraphNode[];\n  edges: GraphEdge[];\n\n  routingLut: Map<string, GraphNode[][]>;\n}","import useResizeObserver from \"@react-hook/resize-observer\";\nimport * as d3 from \"d3\";\nimport { useLayoutEffect, useReducer, useRef, useState } from \"react\";\nimport Permutation, { correctIdx } from \"../common/Permutation\";\nimport { backgroundColor, getColorScale, inputColor, midColor, outputColor } from \"../common/Colors\";\nimport PermWidget, { Vec2 } from \"@/common/PermWidget\";\nimport { Graph, GraphEdge, GraphNode, GraphNodeType, height, width } from \"./Graph\";\n\n\ntype AddEdgeInteraction = {\n  fromNode: GraphNode,\n  toX: number,\n  toY: number\n};\n\nexport default function Construction({\n  ioHeight,\n  perm\n} : {ioHeight: number, perm: Permutation | null})\n{\n  let ref = useRef<HTMLDivElement>(null);\n  let dummyRectRef = useRef<SVGRectElement>(null);\n  let [size, setSize] = useState<DOMRect|undefined>();\n\n  let [draggedNode, setDraggedNode] = useState<GraphNode>();\n  let [edgeInteraction, setEdgeInteraction] = useState<AddEdgeInteraction>();\n\n  // TODO: This will execute the constructor every time we render.\n  let [graph, setGraph] = useState<Graph>(new Graph(ioHeight));\n  \n  // HACK: Have some default value for our graph.\n  if (graph.edges.length === 0) {\n    let graph = Graph.makeCompleteBipartiteGraph(ioHeight);\n    setGraph(graph);\n  }\n\n  let [editPerm, setEditPerm] = useState<Permutation>(new Permutation([...Array(ioHeight).keys()]));\n\n  if (perm == null) {\n    perm = editPerm;\n  }\n\n  let [simulation, setSimulation] = useState<d3.Simulation<GraphNode, undefined>>();\n  let [, forceUpdate] = useReducer(x => x + 1, 0);\n  \n  let screenWidth = size?.width || 0;\n  let screenHeight = size?.height || 0;\n\n  let vertical = false;\n\n  function ticked() {\n    forceUpdate();\n  }\n  \n  useLayoutEffect(() => {\n    setSize(ref.current?.getBoundingClientRect());\n\n    let sim = d3.forceSimulation(graph.nodes)\n\n    sim.on(\"tick\", ticked);\n    sim.force(\"charge\", d3.forceManyBody());\n    sim.force(\"springs\", d3.forceLink(graph.edges))\n\n    setSimulation(sim);\n  }, [ref]);\n\n  if (typeof window !== \"undefined\") {\n    useResizeObserver(ref, entry => setSize(entry.contentRect));\n  }\n\n  function svgToClient(x: number, y: number) : Vec2 {\n    let svgPoint = new DOMPoint(x, y);\n    let xform = dummyRectRef.current?.getScreenCTM();\n    if (!xform) {\n      return [0, 0];\n    }\n\n    svgPoint = svgPoint.matrixTransform(xform);\n    let clientRect = ref.current?.getBoundingClientRect();\n    if (clientRect) {\n      svgPoint.x -= clientRect.left;\n      svgPoint.y -= clientRect.top;\n    }\n\n    return [svgPoint.x, svgPoint.y];\n  }\n\n  function clientToSvg(x: number, y: number) {\n    let svgPoint = new DOMPoint(x, y);\n    //console.log(\"client\", svgPoint);\n    svgPoint = svgPoint.matrixTransform(dummyRectRef.current?.getScreenCTM()?.inverse());\n    //console.log(\"xform\", svgPoint);\n    //svgPoint.x = graph.xScale.invert(svgPoint.x);\n    //svgPoint.y = graph.yScale.invert(svgPoint.y);\n    //console.log(\"scale\", svgPoint);\n    return [svgPoint.x, svgPoint.y];\n  }\n\n  function clientToIdx(x: number, y: number) {\n    let [svgX, svgY] = clientToSvg(x, y);\n    let scaleY = graph.yScale.invert(svgY);\n    return correctIdx(scaleY, height);\n  }\n\n  function getEventPoint(e: React.MouseEvent) {\n    return clientToSvg(e.clientX, e.clientY);\n  }\n\n  function reheat() {\n    simulation?.nodes(graph.nodes).alpha(1).restart();\n    forceUpdate();\n  }\n\n  function handleMouseDown(e: React.MouseEvent, node?: GraphNode) {\n    let [ex, ey] = getEventPoint(e);\n\n    if (e.ctrlKey) {\n      let newNode: GraphNode = { type: GraphNodeType.Internal, key: \"usrnd_\" + graph.getNextId(), y: ey, x: ex };\n\n      graph.nodes.push(newNode);\n      graph.routeAllPermutations();\n      reheat();\n      e.stopPropagation();\n    } else if (e.altKey) {\n      if (node) {\n        setEdgeInteraction({\n          fromNode: node,\n          toX: ex,\n          toY: ey\n        });\n        e.stopPropagation();\n      }\n    } else {\n      if (node?.type === GraphNodeType.Internal) {\n        setDraggedNode(node);\n        e.stopPropagation();\n      }\n    }\n  }\n\n  function handleMouseMove(e: React.MouseEvent) {\n    let [ex, ey] = getEventPoint(e);\n\n    if (draggedNode) {\n      draggedNode.fx = ex;\n      draggedNode.fy = ey;\n      reheat();\n    } else if (edgeInteraction) {\n      setEdgeInteraction({\n        fromNode: edgeInteraction.fromNode,\n        toX: ex,\n        toY: ey\n      });\n      e.stopPropagation();\n    }\n  }\n\n  function handleMouseUp(e: React.MouseEvent, node?: GraphNode) {\n    let [ex, ey] = getEventPoint(e);\n\n    if (draggedNode) {\n      draggedNode.fx = draggedNode.fy = undefined;\n      draggedNode.x = ex;\n      draggedNode.y = ey;\n      reheat();\n      setDraggedNode(undefined);\n      e.stopPropagation();\n    }\n\n    if (edgeInteraction) {\n      if (node) {\n        let newEdge: GraphEdge = {\n          source: edgeInteraction.fromNode,\n          target: node\n        };\n        graph.edges.push(newEdge);\n        graph.routeAllPermutations();\n      }\n\n      reheat();\n      setEdgeInteraction(undefined);\n      e.stopPropagation();\n    }\n  }\n\n  function drawGraph(canvas: React.JSX.Element[]) {\n    for (let edge of graph.edges) {\n      let src = edge.source as GraphNode;\n      let tgt = edge.target as GraphNode;\n\n      let line = <line key={edge.index} x1={src.x} y1={src.y} x2={tgt.x} y2={tgt.y} stroke=\"white\" strokeWidth={2} />;\n\n      canvas.push(line);\n    }\n\n    var colorScale = getColorScale(ioHeight);\n    let paths = graph.routingLut.get(perm.lut.toString());\n    if (paths) {\n      for (let [pathIdx, path] of paths.entries()) {\n        for (let nodeIdx = 0; nodeIdx < path.length - 1; nodeIdx++) {\n          let src = path[nodeIdx];\n          let tgt = path[nodeIdx + 1];\n\n          let line = <line x1={src.x} y1={src.y} x2={tgt.x} y2={tgt.y} stroke={colorScale(pathIdx)} strokeWidth={5} />;\n          canvas.push(line);\n        }\n      }\n    }\n\n    if (edgeInteraction) {\n      let src = edgeInteraction.fromNode;\n      let line = <line key={\"edgeInteract\"} x1={src.x} y1={src.y} x2={edgeInteraction.toX} y2={edgeInteraction.toY} stroke=\"white\" strokeWidth={4} />;\n\n      canvas.push(line);\n    }\n\n    for (let node of graph.nodes) {\n      let color;\n      if (node.type === GraphNodeType.Internal) {\n        color = midColor;\n      } else if (node.type === GraphNodeType.Input) {\n        color = inputColor;\n      } else if (node.type === GraphNodeType.Output) {\n        color = outputColor;\n      }\n\n      let circ = <circle key={node.key} cx={node.x} cy={node.y} r={10} fill={color} onMouseDown={e => handleMouseDown(e, node)} onMouseUp={e => handleMouseUp(e, node)}/>\n\n      canvas.push(circ);\n    }\n  }\n\n  let graphCanvas : React.JSX.Element[] = [];\n  drawGraph(graphCanvas);\n\n  let svg = <svg className=\"absolute\" width={screenWidth} height={screenHeight} viewBox={`0 0 ${width} ${height}`} >\n    <rect ref={dummyRectRef} opacity={0} x=\"0\" y=\"0\" width=\"0\" height=\"0\" stroke=\"none\" fill=\"none\" />\n    {graphCanvas}\n  </svg>;\n\n  function handlePermChange(newPerm: Permutation) {\n    setEditPerm(newPerm);\n  }\n\n  return <div className=\"flex items-stretch w-full h-full p-1\" style={{ background: backgroundColor, flexDirection: vertical ? \"column\" : \"row\"}}>\n    <div className=\"flex grow items-stretch p-1\" onMouseDown={handleMouseDown} onMouseMove={handleMouseMove} onMouseUp={handleMouseUp}>\n      <div ref={ref} className=\"relative flex grow p-0 m-0 overflow-hidden\" >\n        {svg}\n        <PermWidget perm={perm} onPermChanged={handlePermChange} vertical={false} idxToXY={idx => svgToClient(...graph.getOutputPos(idx))} xyToIdx={(x, y) => clientToIdx(x, y)}/>\n      </div>\n      \n    </div>\n  </div>\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport '@/styles/index.css';\nimport { useState } from \"react\";\nimport BenesNet from \"../route-benes/BenesNet\";\nimport NoSsr from \"../common/NoSsr\";\nimport { Splitter, SplitterPanel } from 'primereact/splitter';\nimport { InputNumber, InputNumberValueChangeEvent } from 'primereact/inputnumber';\nimport { PrimeReactProvider } from 'primereact/api';\nimport \"primereact/resources/themes/lara-dark-teal/theme.css\";\nimport { InputSwitch, InputSwitchChangeEvent } from \"primereact/inputswitch\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { initMacros, KI } from \"../common/katex\";\nimport Construction from \"./Construction\";\nimport Permutation, { allPerms } from \"../common/Permutation\";\nimport { inputColor, outputColor } from \"../common/Colors\";\n\nfunction Main()\n{\n  let [ioHeight, setIoHeight] = useState<number>(4);\n  let [perms, setPerms] = useState<Permutation[]>(allPerms(ioHeight));\n\n  let permCards: React.JSX.Element[] = [];\n\n  for (let perm of perms) {\n    console.log(perm.toString());\n    permCards.push(\n      <div className=\"w-full h-96\">\n        <Construction ioHeight={ioHeight} perm={perm} />\n      </div>\n    );\n  }\n\n  return <Splitter className=\"h-dvh w-full\">\n    <SplitterPanel size={60} className=\"overflow-hidden\">\n      <div className=\"w-full h-full\">\n        <Construction perm={null} ioHeight={ioHeight} />\n      </div>\n    </SplitterPanel>\n    <SplitterPanel size={40} className=\"\">\n      <div className=\"overflow-auto w-full\">\n        <InputNumber className=\"\" name=\"benesOrder\" value={ioHeight} onValueChange={(e: InputNumberValueChangeEvent) => {\n          let val = e.value;\n          if (val && !isNaN(val)) {\n            setIoHeight(val)\n          }\n        }} mode=\"decimal\" showButtons min={1} max={5} />\n\n        <div>Click and drag to move nodes, Ctrl-Click to add nodes, Alt-Click to add edges.\n\n          </div>\n        <h1>Permutations</h1>\n\n        {permCards}\n      </div>\n    </SplitterPanel>\n  </Splitter>;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\ninitMacros();\nroot.render(\n  <React.StrictMode>\n      <PrimeReactProvider>\n        {/* A fixed pos seems to be necessary to get rid of some strange scrollbars */}\n        <div className=\"fixed flex overflow-hidden h-dvh w-full\">\n          <Main />\n        </div>\n      </PrimeReactProvider>\n  </React.StrictMode>\n);\n","export default class Permutation {\n  constructor(lut: number[]) {\n    this.lut = [...lut];\n\n    // Compute the inverse.\n    this.invLut = Array<number>(lut.length)\n    for (let i = 0; i < lut.length; i++) {\n      this.invLut[lut[i]] = i;\n    }\n  }\n\n  invert() {\n    let swap = this.invLut;\n    this.invLut = this.lut;\n    this.lut = swap;\n  }\n\n  lut: number[];\n  invLut: number[];\n}\n\nexport function correctIdx(rawIdx: number, height: number) {\n  return Math.min(height - 1, Math.max(0, Math.round(rawIdx)));\n}\n\nfunction allPerms_recurse(unusedNums: Set<number>, lut: number[], n: number, perms: Permutation[]) {\n  if (lut.length === n) {\n    perms.push(new Permutation(lut));\n    return;\n  }\n\n  let unusedList = Array.from(unusedNums).toSorted();\n\n  for (let unusedNum of unusedList) {\n    lut.push(unusedNum);\n    unusedNums.delete(unusedNum);\n    allPerms_recurse(unusedNums, lut, n, perms);\n    unusedNums.add(unusedNum);\n    lut.pop();\n  }\n}\n\nexport function allPerms(n: number) {\n  let unusedNums = new Set<number>();\n\n  for (let i = 0; i < n; i++) {\n    unusedNums.add(i);\n  }\n\n  let result: Permutation[] = [];\n\n  allPerms_recurse(unusedNums, [], n, result);\n\n  return result;\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.j = 276;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t276: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkreact_ts_tailwind_starter\"] = self[\"webpackChunkreact_ts_tailwind_starter\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [967,810,76], () => (__webpack_require__(4313)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","getColorScale","resolution","d3","domain","interpolator","palette","t","Math","min","max","GraphNodeType","Graph","constructor","ioHeight","this","xScale","yScale","inputs","inputIdx","x","y","getInputPos","node","key","type","Input","fx","fy","push","outputs","outputIdx","getOutputPos","Output","nextId","nodes","edges","routingLut","Map","makeCompleteBipartiteGraph","graph","newEdge","source","target","routeAllPermutations","foreachEdgeSubset","doSomething","binaryCounter","Array","length","fill","incSucc","i","hasNoValence3Nodes","edgeSubset","nodeValences","bumpValence","current","get","set","edgeIdx","edge","valenceA","valenceB","isVertical","floor","valences","permutationLut","permutationPaths","path","lastNode","at","penultimateNode","incidentEdgeIndices","foundNewPathNode","incidentEdgeIdx","adjNode","getOppositeEdgeNode","pathIsSane","toString","adjacentVerts","result","getNextId","Construction","_ref","perm","ref","useRef","dummyRectRef","size","setSize","useState","draggedNode","setDraggedNode","edgeInteraction","setEdgeInteraction","setGraph","editPerm","setEditPerm","Permutation","keys","simulation","setSimulation","forceUpdate","useReducer","screenWidth","width","screenHeight","height","ticked","clientToSvg","svgPoint","DOMPoint","matrixTransform","getScreenCTM","inverse","getEventPoint","e","clientX","clientY","reheat","alpha","restart","handleMouseDown","ex","ey","ctrlKey","newNode","Internal","stopPropagation","altKey","fromNode","toX","toY","handleMouseUp","undefined","useLayoutEffect","getBoundingClientRect","sim","on","force","window","useResizeObserver","entry","contentRect","graphCanvas","canvas","src","tgt","line","_jsx","x1","y1","x2","y2","stroke","strokeWidth","index","colorScale","paths","lut","pathIdx","entries","nodeIdx","color","circ","cx","cy","r","onMouseDown","onMouseUp","drawGraph","svg","_jsxs","className","viewBox","children","opacity","style","background","flexDirection","onMouseMove","PermWidget","onPermChanged","newPerm","vertical","idxToXY","idx","xform","clientRect","left","top","svgToClient","xyToIdx","svgX","svgY","scaleY","invert","correctIdx","clientToIdx","Main","setIoHeight","perms","setPerms","allPerms","permCards","Splitter","SplitterPanel","InputNumber","name","value","onValueChange","val","isNaN","mode","showButtons","root","ReactDOM","document","getElementById","initMacros","render","React","PrimeReactProvider","invLut","swap","rawIdx","round","allPerms_recurse","unusedNums","n","unusedList","from","toSorted","unusedNum","delete","add","pop","Set","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","every","splice","d","definition","o","defineProperty","enumerable","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}