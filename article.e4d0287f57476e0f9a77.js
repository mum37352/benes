(()=>{"use strict";var e,t={659:(e,t,n)=>{var o=n(6540),r=n(5338),i=n(23);var s=n(6214),a=n(4848);function l(e){let{tag:t,children:n,className:o}=e;return(0,a.jsxs)("div",{className:`relative shadow-lg border border-gray-200 rounded-lg p-3 m-2 ${o}`,children:[t&&(0,a.jsx)("div",{className:"absolute text-2xl -left-5 -translate-x-full",children:t}),n]})}function h(e){let{children:t}=e;return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h1",{className:"text-5xl font-bold mt-8 text-stone-800",children:t}),(0,a.jsx)("hr",{className:"h-px my-8 bg-gray-400 border-0 mb-14"})]})}function $(e){let{children:t}=e;return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h1",{className:"text-3xl font-bold mt-14 mb-0 text-stone-800",children:t}),(0,a.jsx)("hr",{className:"h-px my-8 bg-gray-200 border-0 mt-2 mb-4 "})]})}function c(e){let{children:t}=e;return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)("h2",{className:"text-2xl font-bold mt-14 mb-0 text-stone-800",children:t}),(0,a.jsx)("hr",{className:"h-px my-8 bg-gray-200 border-0 mt-2 mb-4 "})]})}function u(e){let{children:t}=e;return(0,a.jsx)("span",{className:"text-stone-800 font-bold",children:t})}var p=n(8592),m=n(5849),d=n(3518),f=n(8435),g=n(2804);n(7489);const b=n.p+"assets/reduction/leq.+TrHV.svg";function w(){let[e,t]=(0,o.useState)((()=>function(e){let t=new m.Py(e);return{graph:t,compatGraph:new m.T3(t)}}(3))),n=e.graph,r=e.compatGraph,[i,h]=(0,o.useState)("insert"),[,$]=(0,o.useReducer)((e=>e+1),0);(0,o.useRef)(null);function c(n,o){$(),o&&(e.compatGraph=new m.T3(e.graph),t({...e}))}return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsxs)("div",{className:"text-sm",children:[(0,a.jsxs)("label",{className:"block mb-1 font-bold",htmlFor:"inputHeight",children:["Clique-size ",(0,a.jsx)(s.KI,{children:"k"}),":"]}),(0,a.jsx)(g.Y,{className:"",name:"inputHeight",value:e.graph.cliqueSize,onValueChange:n=>{let o=n.value;o&&!isNaN(o)&&(e.graph.cliqueSize=o,t({...e}),c(e.graph,!0))},mode:"decimal",showButtons:!0,min:1,max:5})]}),(0,a.jsx)(d.sR,{activeTool:i,onChange:h,paintBrush:!0,children:(0,a.jsx)(l,{tag:(0,a.jsx)(s.KI,{children:"\\mathsf{Col3}(G)"}),className:"relative flex items-stretch w-3/5 h-100 mx-auto p-1",children:(0,a.jsx)(p.A,{compatGraph:r,tool:i,colGraph:n,onChange:c})})}),(0,a.jsx)("img",{src:b,className:"w-16 m-auto"}),(0,a.jsx)(l,{tag:(0,a.jsx)(s.KI,{children:"\\mathsf{Clique}(G')"}),className:"relative flex items-stretch w-3/5 h-100 mx-auto p-1",children:(0,a.jsx)(f.A,{graph:n,compatGraph:r,onColoringChanged:()=>$()})})]})}let x={extensions:[{name:"inlineMath",level:"inline",start:e=>e.match(/\$/)?.index,tokenizer(e){const t=e.match(/^\$([^\$]+)\$/);if(t)return{type:"inlineMath",raw:t[0],text:t[1].trim()}}},{name:"blockMath",level:"block",start:e=>e.match(/\$\$/)?.index,tokenizer(e){const t=e.match(/^\$\$([^$]+)\$\$/m);if(t)return{type:"blockMath",raw:t[0],text:t[1].trim()}}},{name:"applet",level:"block",start:e=>e.match(/\$\$/)?.index,tokenizer(e){let t=e.match(/^%%Applet:([A-Za-z0-9_-]+)%%/);if(t)return{type:"applet",raw:t[0],text:t[1].trim()}}}]};i.xI.use(x);let v=function(){let e="\ufeff# Lower bounds for detecting small subgraphs\n\nThe exponential-time hypothesis (ETH) implies a lower bound for the canonical hard problem in parameterized complexity: Detecting **$k$-cliques in $n$-vertex graphs.** This problem requires time $n^{\\Omega(k)}$ under ETH.\n\nWe would like to transfer this lower bound to other parameterized problems. However, there is a problematic blowup: Reductions from $k$-clique to other problems usually need $k$ \"vertex gadgets\" to encode potential clique vertices, and $k \\choose 2$ \"edge gadgets\" to check edges between the encoded vertices. This yields target instances with parameter value $\\ell = \\Omega(k^2)$, since each gadget has to increase the parameter by at least a constant value. Due to this parameter increase, only $n^{o(\\sqrt \\ell)}$ time algorithms can be ruled out for the target problem by reduction from $k$-clique.\n\nA better source problem is **colorful subgraph isomorphism**: We call a  $k$-vertex graph $H$  colorful if it is bijectively vertex-colored with $[k]$. For any fixed colorful $k$-vertex graph $H$, we consider the following problem:\n\n> $\\mathsf{ColSub}(H)$: Given colored graphs $H$ and $G$, does $G$ contain a subgraph isomorphic to $H$? The colors matter for the isomorphism, and we assume that $H$ is colorful.\n\nWhen $H=K_k$ is a complete graph, $\\mathsf{ColSub}(K_k)$ is a colorful version of the $k$-clique problem, for which ETH rules out $n^{o(k)}$ time algorithms. A breakthrough result by Marx shows a similar lower bound even for graphs $H$ of maximum degree $3$:\n> If ETH holds, then $\\mathsf{ColSub}(H)$ cannot be solved in time $n^{o(k/\\log k)}$, even for $k$-vertex graphs $H$ of maximum degree $3$.\n\nThis helps a lot in proving lower bounds for other parameterized problems. The reason is that many reductions from $\\mathsf{Clique}$ to problems $\\mathsf X$ can be turned into reductions from $\\mathsf{ColSub}(H)$ with arbitrary $H$ to $\\mathsf X$. Usually, the same vertex- and edge-gadgets work, each of which increase the parameter by $O(1)$. If we start with a $k$-vertex graph $H$ of maximum degree $3$, then we only need to take care of $O(k)$ rather than $O(k^2)$ edges.\n\nOverall, this transforms an $\\mathsf{ColSub}(H)$-instance with a $k$-vertex graph $H$ to an $\\mathsf X$-instance with parameter $\\ell = O(k)$. If we could then solve $\\mathsf X$ in $n^{o(\\ell / \\log \\ell)}$ time, we would refute Marx's bound. This strategy was used in many papers to rule out $n^{o(\\ell / \\log \\ell)}$ time algorithms for problems with known $n^{O(\\ell)}$ time algorithms.\n\nIn this note, we give a self-contained and arguably simple proof of Marx's lower bound.\n\n## Proving the lower bounds\n\nOur starting point for the proof is the $3$-coloring problem, which has no $2^{o(n)}$ time algorithms under ETH. (This can be shown using the standard reduction from 3-SAT together with the sparsification lemma, by which ETH already rules out $2^{o(n)}$ time algorithms for $n$-variable 3-SAT *with just $O(n)$ clauses*.) The lower bound even holds on graphs of maximum degree $3$.\n\nFor technical reasons, we generalize this problem slightly: Besides the usual *\"disequality\"* edges in the $3$-coloring problem that require distinct colors at their endpoints, we also allow *\"equality\"* edges that require their endpoints to have the same color. Being a generalization of $3$-coloring, there are no $2^{o(n)}$ time algorithms for this problem under ETH.\n\nNow this is the basic idea behind the lower bound: \n- We transform an $n$-vertex instance $G$ for the generalized $3$-coloring problem into an equivalent $H$-subgraph problem instance $G'$ with approximately $3^{n/k}$ vertices. \n- Then an $n^{o(k)}$-time algorithm for the $H$-subgraph problem would then imply a $2^{o(n)}$-time algorithm for the generalized $3$-coloring problem. But this contradicts ETH. \n\n\n### Cliques\n\nAs a warm-up, we demonstrate this idea with $H=K_k$. In this case, we construct $G'$ as follows from $G$: \n- $V(G)$ is divided equitably into *blocks* $V_1, \\ldots, V_k$ of size at most $\\lceil n/k\\rceil$ each. The resulting graph depends on our choice of blocks, but any choice is fine.\n- For each proper $3$-assignment of $V_i$, we add a vertex of color $i$ to the graph $G'$.\n- Two vertices in $G'$ are connected by an edge if their colorings are compatible, meaning they come from different blocks and together form a proper assignment.\n\n%%Applet:reduction%%\n\nIn other words, we have created a **compatibility graph** $G'$ on the partial assignments to individual blocks of $G$. This graph has at most  $k 3^b$ vertices, where $b = \\lceil n/k \\rceil$ is the maximum block size. The key observation is:\n\n> The colorful $k$-cliques $K$ in the compatibility graph $G'$ correspond bijectively to proper assignments of the original graph $G$. \n\nIndeed, consider a clique $K$ in the compatibility graph $G'$: Its vertices $v_1,\\ldots,v_k$ provide a valid assignment for each block in $G$. Moreover, the presence of all edges $v_iv_j$ with $i \\neq j$ in $K$ ensures that the union of these partial assignments is a valid assignment of $G$ as a whole. If there was a conflict in the union, then it would stem from an edge between two different blocks in $G$, but our compatibility relation in $G'$ rules this out. Conversely, every proper assignment to $G$ specifies a unique clique in $G'$.\n\n### Blowups and compression rate\n\nUnder very lucky conditions, the lower bound for $k$-cliques works even for $H$-subgraph problems involving subgraphs $H$ of $k$-cliques: Imagine that our partition of $V(G)$ into blocks $V_1,\\ldots,V_k$ of size $n/k$ gives rise to an \"empty pair\" $(i,j) \\in [k]^2$ such that $G$ does not contain any edges between $V_i$ and $V_j$. In this case, no conflicts can arise between partial assignments to $V_i$ and $V_j$, so we don't need to test compatibility between such assignments. (Restricted to such assignments, the compatibility graph $G'$ is a complete bipartite graph, so it contains no relevant information in this part.)\n\nIn fact, $G$ could even have empty pairs for all non-edges of a specific $k$-vertex graph $H$ of interest. Then $G$ would fit into the $t$-**blowup** of $H$, written $H \\boxtimes K_t$, which is obtained by turning each vertex $v$ into a $t$-clique and turning edges into complete bipartite graphs. If $G$ is a subgraph of $H \\boxtimes K_t$  and we build the compatibility graph $G'$ with blocks corresponding to the cliques, then we obtain:\n\n> If $G$ is a subgraph of $H \\boxtimes K_t$, then the proper assignments of $G$ correspond bijectively to the $H$-copies in $G'$. \n\nImagine for now that the assignment problem keeps its $2^{\\Omega(n)}$ time lower bound under ETH when each input $G$ (an $n$-vertex graph) is given as a subgraph of $H \\boxtimes K_{n/k}$. Then the above correspondence between assignments of $G$ and $H$-copies in $G'$ would imply an $n^{\\Omega(k)}$ lower bound for the colorful $H$-subgraph problem: Indeed, an $H$-subgraph exists in $G'$ if and only if there is a proper assignment in $G$.\n\nThis works more generally: When the coloring problem has a $2^{\\Omega(n)}$ lower bound on graphs $G$ that are explicitly given as subgraphs of $H \\boxtimes K_{n/t}$, for some **compression rate** $t\\in \\mathbb N$, then an $n^{\\Omega(t)}$ lower bound follows for the colorful $H$-subgraph problem. Our original paper formally defines a closely related but more complicated notion, the *linkage capacity* $\\gamma(H)$, but the more informal notion of compression rate above suffices for this note.\n\n\n## Benes networks\n\n%%Applet:benes%%\n\nIn the remainder of the note, we construct $k$-vertex graphs $H$ of maximum degree $4$ with compression rate $t = \\Omega(k / \\log k)$. These graphs are so-called **Benes networks**, first discovered in the context of communication networks. With the reduction from the previous section, this implies:\n\n> The colorful $H$-subgraph problem for Benes networks requires $n^{\\Omega (k/\\log k)}$ time under ETH.\n\nThis gives us Marx's original lower bound for sparse $H$-subgraph problems, which is the best known lower bound under ETH.\n\n### Construction\n\nThe Benes networks are recursively defined graphs $B_\\ell$ for $\\ell \\in \\mathbb N$. The graph $B_\\ell$ has $2^\\ell$ input and $2^\\ell$ output vertices, maximum degree $4$, and $O(2^\\ell \\ell)$ vertices in total. Or, writing $s=2^\\ell$, it has $k=O(s \\log s)$ vertices. The graphs are built as follows: \n- $B_1$ is a complete bipartite graph on $2+2$ vertices.\n- $B_{\\ell+1}$ is built from two vertex-disjoint copies of $B_\\ell$: For each index $i \\in [2^\\ell]$, we create two fresh input vertices and make them adjacent to input $i$ from each of the two $B_\\ell$-copies. We do the same with outputs. The inputs and outputs of $B_{\\ell+1}$ are the new vertices created this way.\n\nNote that the inputs come in pairs of vertices with the same neighborhood; such pairs are called twins. Of course, the same holds for the outputs.\n\nIf you want, you can try building your own Benes network below.\n\n%%Applet:construction%%\n\n### Routing matchings in blowups\n\nFor our compression result, we consider blowups $B_\\ell \\boxtimes K_t$ of Benes networks. The inputs/output vertices of $B_\\ell \\boxtimes K_t$ are the blowups of input/output vertices in $B_\\ell$. We show the following:\n\n> **$B_\\ell \\boxtimes K_t$ can route input-output matchings:** For every bijection $\\pi$ from inputs to outputs of $B_\\ell \\boxtimes K_t$, there is a collection of vertex-disjoint paths connecting each input with its corresponding output under $\\pi$.\n\nWe prove this by fixing $t$ arbitrary and performing induction over $\\ell$. The statement is trivial for $B_1 \\boxtimes K_t$, because this graph is isomorphic to $K_{2t,2t}$. \n\nFor the induction step, we assume that $B_\\ell \\boxtimes K_t$ can route input-output matchings and show it for $B_{\\ell+1} \\boxtimes K_t$. Recall that $B_{\\ell+1}$ consists of two subnetworks $B^\\uparrow$ and $B^\\downarrow$ isomorphic to $B_\\ell$. Then $B_\\ell \\boxtimes K_t$ consists of subnetwork blowups $B^\\uparrow \\boxtimes K_t$ and $B^\\downarrow \\boxtimes K_t$.\n\nA collection of paths $\\mathcal P$ from inputs to outputs in $B_{\\ell+1} \\boxtimes K_t$ is vertex-disjoint if (but not only if) the following three conditions are satisfied:\n1. For $i \\in [2^\\ell]$, write $v_i$ and $v'_i$ for the two inputs of $B_{\\ell+1}$ adjacent to input $i$ of the two subnetworks. Let $a$ and $a'$ be vertices in $B_{\\ell+1} \\boxtimes K_t$ from the $t$-blowups of $v_i$ and $v'_i$, respectively. The **first condition** is that the two paths starting at $a$ and $a'$ should go into different subnetwork blowups.\n2. The same holds for outputs: If $w_i$ and $w_{2^\\ell +i}$ are the outputs adjacent to output $i$ of the subnetworks, then the paths in $\\mathcal P$ ending there must come from different subnetworks.\n3. Within each subnetwork, $\\mathcal P$ must induce vertex-disjoint paths from inputs to outputs.\n\n\n\n### Compression rate\n\nTo show the compression rate, we prove that every $n$-vertex graph $G$ of maximum degree $4$ is a topological minor of $H \\boxtimes K_{n/t}$. This means $G$ is a subgraph of $H \\boxtimes K_{n/t}$ after subdividing the edges of $H$ appropriately.\n\n\n".replace(/^\uFEFF/,"");return i.xI.lexer(e)}();function k(e){let{tokens:t}=e,n=[];for(let e of t)if("heading"===e.type)1===e.depth?n.push((0,a.jsx)(h,{children:(0,a.jsx)(k,{tokens:e.tokens})})):2===e.depth?n.push((0,a.jsx)($,{children:(0,a.jsx)(k,{tokens:e.tokens})})):3===e.depth&&n.push((0,a.jsx)(c,{children:(0,a.jsx)(k,{tokens:e.tokens})}));else if("text"===e.type)n.push((0,a.jsx)(a.Fragment,{children:e.text}));else if("paragraph"===e.type)n.push((0,a.jsx)("p",{className:"mb-4 mt-4",children:(0,a.jsx)(k,{tokens:e.tokens})}));else if("strong"===e.type)n.push((0,a.jsx)(u,{children:(0,a.jsx)(k,{tokens:e.tokens})}));else if("inlineMath"===e.type)n.push((0,a.jsx)("span",{className:"text-sm",children:(0,a.jsx)(s.KI,{children:e.text})}));else if("blockMath"===e.type)n.push((0,a.jsx)(s.KB,{children:e.text}));else if("blockquote"===e.type)n.push((0,a.jsx)(l,{tag:(0,a.jsx)(a.Fragment,{}),children:(0,a.jsx)(k,{tokens:e.tokens})}));else if("list"===e.type)n.push((0,a.jsx)("ul",{className:"list-disc pl-5",children:(0,a.jsx)(k,{tokens:e.items})}));else if("list_item"===e.type){let t=i.xI.lexer(e.text);n.push((0,a.jsx)("li",{children:(0,a.jsx)(k,{tokens:t})}))}else"applet"===e.type&&("reduction"===e.text?n.push((0,a.jsx)(w,{})):n.push((0,a.jsx)("iframe",{src:`https://mum37352.github.io/benes/${e.text}.html`,width:"100%",height:"500",frameBorder:"0",allowFullScreen:!0})));return(0,a.jsx)(a.Fragment,{children:n})}function y(){return(0,a.jsx)(k,{tokens:v})}r.createRoot(document.getElementById("root")).render((0,a.jsx)(o.StrictMode,{children:(0,a.jsx)("div",{className:"mx-auto max-w-4xl p-3 font-crimson text-lg",children:(0,a.jsx)(y,{})})}))}},n={};function o(e){var r=n[e];if(void 0!==r)return r.exports;var i=n[e]={exports:{}};return t[e](i,i.exports,o),i.exports}o.m=t,e=[],o.O=(t,n,r,i)=>{if(!n){var s=1/0;for($=0;$<e.length;$++){for(var[n,r,i]=e[$],a=!0,l=0;l<n.length;l++)(!1&i||s>=i)&&Object.keys(o.O).every((e=>o.O[e](n[l])))?n.splice(l--,1):(a=!1,i<s&&(s=i));if(a){e.splice($--,1);var h=r();void 0!==h&&(t=h)}}return t}i=i||0;for(var $=e.length;$>0&&e[$-1][2]>i;$--)e[$]=e[$-1];e[$]=[n,r,i]},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.j=275,(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&"SCRIPT"===t.currentScript.tagName.toUpperCase()&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");if(n.length)for(var r=n.length-1;r>-1&&(!e||!/^http(s?):/.test(e));)e=n[r--].src}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/^blob:/,"").replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{var e={275:0,869:0};o.O.j=t=>0===e[t];var t=(t,n)=>{var r,i,[s,a,l]=n,h=0;if(s.some((t=>0!==e[t]))){for(r in a)o.o(a,r)&&(o.m[r]=a[r]);if(l)var $=l(o)}for(t&&t(n);h<s.length;h++)i=s[h],o.o(e,i)&&e[i]&&e[i][0](),e[i]=0;return o.O($)},n=self.webpackChunkreact_ts_tailwind_starter=self.webpackChunkreact_ts_tailwind_starter||[];n.forEach(t.bind(null,0)),n.push=t.bind(null,n.push.bind(n))})();var r=o.O(void 0,[869,967,810,76],(()=>o(659)));r=o.O(r)})();
//# sourceMappingURL=article.e4d0287f57476e0f9a77.js.map