{"version":3,"file":"construction.b19772b0bafffce0606d.js","mappings":"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","sources":["webpack://react-ts-tailwind-starter/webpack/runtime/chunk loaded","webpack://react-ts-tailwind-starter/./src/construction/Construction.tsx","webpack://react-ts-tailwind-starter/./src/construction/CommGraph.ts","webpack://react-ts-tailwind-starter/./src/construction/page.tsx","webpack://react-ts-tailwind-starter/webpack/bootstrap","webpack://react-ts-tailwind-starter/webpack/runtime/compat get default export","webpack://react-ts-tailwind-starter/webpack/runtime/define property getters","webpack://react-ts-tailwind-starter/webpack/runtime/hasOwnProperty shorthand","webpack://react-ts-tailwind-starter/webpack/runtime/runtimeId","webpack://react-ts-tailwind-starter/webpack/runtime/jsonp chunk loading","webpack://react-ts-tailwind-starter/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","import { useRef, useState } from \"react\";\nimport Permutation, { clipToRange } from \"../common/Permutation\";\nimport {  getColorScale, midColor } from \"../common/Colors\";\nimport PermWidget from \"@/common/PermWidget\";\nimport { CommGraph, CommGraphNode } from \"./CommGraph\";\nimport { useFlushingResizeObserver } from \"@/common/resizeObserver\";\nimport { ToolSel } from \"../common/Toolbar\";\nimport { computeGridLayout as computeWeightedLayout, computeGridMargins, Grid } from \"@/common/Grid\";\nimport { applyTerminalBias, drawNode, GraphNodeType, graphNodeTypeToColor } from \"@/common/NodeDrawing\";\nimport { Box, Vec2 } from \"@/common/mathUtils\";\nimport { useGraphCanvas } from \"@/common/GraphCanvas\";\n\ntype AddEdgeInteraction = {\n  fromNode: string,\n};\n\nexport default function Construction({\n  perm,\n  commGraph,\n  onChange = (() => {}),\n  tool,\n  onPermChanged=null\n} : {perm: Permutation | undefined, commGraph: CommGraph, onChange?: Function, tool: ToolSel, onPermChanged?: null | ((newPerm: Permutation) => void)})\n{\n  let cnv = useGraphCanvas();\n\n  let [draggedNode, setDraggedNode] = useState<string>();\n  let [edgeInteraction, setEdgeInteraction] = useState<AddEdgeInteraction>();\n  let [mousePos, setMousePos] = useState<Vec2>();\n\n  let margin = computeGridMargins(true, false);\n\n  // For fence post reasons, we add 1 to the numGuidelines instead of adding 2. Same for inputs\n  let graphWidth = 1 + commGraph.numGuidelines;\n  let graphHeight = commGraph.ioHeight - 1;\n  let gridWidths = computeWeightedLayout(cnv.screenWidth, [margin.left, graphWidth, margin.right]);\n  let gridHeights = computeWeightedLayout(cnv.screenHeight, [margin.top, graphHeight, margin.bottom]);\n\n  let graphBox = new Box(gridWidths[0], gridHeights[0], gridWidths[0] + gridWidths[1], gridHeights[0] + gridHeights[1]);\n  let grid = new Grid(new Box(0, 0, graphWidth, graphHeight), false, graphBox);\n\n  let zoom = Math.min(gridWidths[1]/graphWidth, gridHeights[1]/graphHeight) / 100;\n\n  let vertical = false;\n\n  // NOTE: Calling e.preventDefault is necessary in the mouse handlers, to avoid\n  // Firefox from removing the keyboard focus from the parent interceptor.\n\n  function handleMouseDown(e: React.MouseEvent, node?: string, edge?: string) {\n    let [ex, ey] = cnv.getEventPoint(e);\n    let type = node ? commGraph.graph.getNodeAttribute(node, \"type\") : undefined;\n\n    if (tool === 'insert') {\n      if (node) {\n        // Add an edge\n        setEdgeInteraction({\n          fromNode: node\n        });\n        e.stopPropagation();\n        e.preventDefault();\n      } else {\n        // Add a node.\n        let x = clipToRange(grid.xFromScreen(ex, ey, true), 1, commGraph.numGuidelines);\n        let y = grid.yFromScreen(ex, ey, false);\n\n        let id = \"usrnd_\" + commGraph.getNextId();\n\n        commGraph.graph.addNode(id, { type: GraphNodeType.Internal, x, y, guideline: x - 1 });\n        commGraph.routeAllPermutations();\n\n        onChange(commGraph);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    } else if (tool === 'delete') {\n      if (type === GraphNodeType.Internal) {\n        commGraph.graph.dropNode(node);\n        commGraph.routeAllPermutations();\n        onChange(commGraph);\n        e.stopPropagation();\n        e.preventDefault();\n      } else if (edge) {\n        commGraph.graph.dropEdge(edge);\n        commGraph.routeAllPermutations();\n        onChange(commGraph);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    } else if (tool === 'drag') {\n      if (type === GraphNodeType.Internal) {\n        setDraggedNode(node);\n        e.stopPropagation();\n        e.preventDefault();\n      }\n    }\n  }\n\n  function reassignNodePosition(e: React.MouseEvent) {\n    let [ex, ey] = cnv.getEventPoint(e);\n\n      let x = clipToRange(grid.xFromScreen(ex, ey, true), 1, commGraph.numGuidelines);\n      let y = grid.yFromScreen(ex, ey, false);\n\n      let draggedAttr = commGraph.graph.getNodeAttributes(draggedNode);\n      draggedAttr.guideline = x - 1;\n      draggedAttr.x = x;\n      draggedAttr.y = y;\n      onChange(commGraph);\n  }\n\n\n  function handleMouseMove(e: React.MouseEvent) {\n    let [ex, ey] = cnv.getEventPoint(e);\n\n    if (draggedNode) {\n      reassignNodePosition(e);\n    } else if (edgeInteraction) {\n      setEdgeInteraction({\n        fromNode: edgeInteraction.fromNode\n      });\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    setMousePos([ex, ey]);\n  }\n\n  function handleMouseUp(e: React.MouseEvent, node?: string) {\n    if (draggedNode) {\n      reassignNodePosition(e);\n      setDraggedNode(undefined);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n\n    if (edgeInteraction) {\n      if (node) {\n        // Prevent self-loops.\n        if (edgeInteraction.fromNode !== node) {\n          commGraph.graph.addEdge(edgeInteraction.fromNode, node);\n          commGraph.routeAllPermutations();\n          onChange(commGraph);\n        }\n      }\n\n      setEdgeInteraction(undefined);\n      e.stopPropagation();\n      e.preventDefault();\n    }\n  }\n\n  function drawGraph(canvas: React.JSX.Element[], labels: React.JSX.Element[]) {\n    for (let guidelineIdx = 0; guidelineIdx < commGraph.numGuidelines; guidelineIdx++) {\n      let [fromX, fromY] = grid.toScreen(guidelineIdx+1, grid.extent.top-1);\n      let [toX, toY] = grid.toScreen(guidelineIdx+1, grid.extent.bottom+1);\n      let line = <line key={`gdln_${guidelineIdx}`} x1={fromX} x2={toX} y1={fromY} y2={toY} stroke={\"black\"} strokeWidth={zoom*4} onMouseDown={e => handleMouseDown(e, undefined, undefined)} />\n      canvas.push(line);\n    }\n\n    commGraph.graph.forEachEdge((edgeId, attributes, source, target) => {\n      let src = commGraph.graph.getNodeAttributes(source);\n      let tgt = commGraph.graph.getNodeAttributes(target);\n      let [fromX, fromY] = grid.toScreen(src.x || 0, src.y || 0);\n      let [toX, toY] = grid.toScreen(tgt.x || 0, tgt.y || 0);\n\n      let line = <line className={tool === 'delete' ? \"cursor-pointer\" : \"\"} key={edgeId} x1={fromX} y1={fromY} x2={toX} y2={toY} stroke=\"white\" strokeWidth={zoom * 2} onMouseDown={e => handleMouseDown(e, undefined, edgeId)} />;\n\n      canvas.push(line);\n    });\n\n    let paths = perm ? commGraph.routingLut.get(perm.lut.toString()) : null;\n    if (paths) {\n      var colorScale = getColorScale(paths.length);\n      for (let [pathIdx, path] of paths.entries()) {\n        for (let nodeIdx = 0; nodeIdx < path.length - 1; nodeIdx++) {\n          let src = commGraph.graph.getNodeAttributes(path[nodeIdx]);\n          let tgt = commGraph.graph.getNodeAttributes(path[nodeIdx + 1]);\n\n          let [fromX, fromY] = grid.toScreen(src.x || 0, src.y || 0);\n          let [toX, toY] = grid.toScreen(tgt.x || 0, tgt.y || 0);\n\n          let line = <line className=\"pointer-events-none\" key={`path-${pathIdx}-${nodeIdx}`} x1={fromX} y1={fromY} x2={toX} y2={toY} stroke={colorScale(pathIdx)} strokeWidth={zoom*5} />;\n          canvas.push(line);\n        }\n      }\n    }\n\n    if (edgeInteraction && mousePos) {\n      let src = commGraph.graph.getNodeAttributes(edgeInteraction.fromNode);\n      let [fromX, fromY] = grid.toScreen(src.x||0, src.y||0);\n\n      let line = <line key={\"edgeInteract\"} x1={fromX} y1={fromY} x2={mousePos[0]} y2={mousePos[1]} stroke=\"white\" strokeOpacity={0.5} strokeWidth={zoom*4} />;\n\n      canvas.push(line);\n    }\n\n    if (tool===\"insert\" && mousePos) {\n      let circ = <circle key=\"ghostCirc\" cx={mousePos[0]} cy={mousePos[1]} r={10} fill={midColor} fillOpacity={0.5} />\n      canvas.push(circ);\n    }\n\n    commGraph.graph.forEachNode((node, attrs) => {\n      let cursor = \"\";\n      if (tool === \"drag\") {\n        cursor = \"cursor-grab\";\n      } else if (tool === \"delete\") {\n        cursor = \"cursor-pointer\"\n      } else if (tool === \"insert\") {\n        cursor = \"cursor-crosshair\"\n      }\n      drawNode(zoom, grid, attrs.type, graphNodeTypeToColor(attrs.type), attrs.x || 0, attrs.y || 0, canvas, labels, {\n        className: cursor,\n        onMouseDown: (e: React.MouseEvent) => {handleMouseDown(e, node)},\n        onMouseUp: (e: React.MouseEvent) => {handleMouseUp(e, node)}\n      });\n    });\n  }\n\n  let graphCanvas: React.JSX.Element[] = [];\n  let labels: React.JSX.Element[] = [];\n  drawGraph(graphCanvas, labels);\n\n  let svg = <svg className=\"absolute\" width={cnv.screenWidth} height={cnv.screenHeight} >\n    <rect ref={cnv.dummyRectRef} opacity={0} x=\"0\" y=\"0\" width=\"0\" height=\"0\" stroke=\"none\" fill=\"none\" />\n    {graphCanvas}\n  </svg>;\n  \n  \n  let permWidget = perm && <PermWidget\n      onHover={() => {}} onLeave={() => {}}\n      zoom={zoom} enableTransition={cnv.enableTransition} perm={perm} onPermChanged={onPermChanged} vertical={vertical} \n      xyToIdx={(x, y) => grid.yFromScreen(x, y)} idxToXY={idx => applyTerminalBias(zoom, grid, ...grid.toScreen(grid.extent.right, idx), false)} />\n\n  return <div className=\"flex items-stretch w-full h-full p-1\" style={{ flexDirection: vertical ? \"column\" : \"row\"}}>\n    <div className=\"flex grow items-stretch p-1\" onMouseDown={handleMouseDown} onMouseMove={handleMouseMove} onMouseUp={handleMouseUp}>\n      <div ref={cnv.ref} className=\"relative flex grow p-0 m-0 overflow-hidden\" >\n        {svg}\n        {labels}\n        {permWidget}\n      </div>\n    </div>\n  </div>\n}","import { foreachNaryString, Vec2 } from \"@/common/mathUtils\";\nimport { GraphNodeType } from \"@/common/NodeDrawing\";\nimport Permutation, { allPerms } from \"@/common/Permutation\";\nimport * as d3 from \"d3\";\nimport Graph from \"graphology\";\n\nlet solver = require('javascript-lp-solver');\n\ntype LPModel = {\n  optimize: string;\n  opType: \"max\" | \"min\";\n  constraints: {\n    [constraintName: string]: {\n      equal?: number;\n      max?: number;\n      min?: number;\n    };\n  };\n  variables: {\n    [variableName: string]: any;\n  };\n};\n\nfunction printLPModel(model: LPModel): void {\n  const { optimize, opType, constraints, variables } = model;\n\n  // Build objective function\n  const objectiveTerms = Object.entries(variables)\n    .map(([varName, coeffs]) => {\n      const c = coeffs[optimize] ?? 0;\n      return c !== 0 ? `${c}*${varName}` : null;\n    })\n    .filter(Boolean)\n    .join(\" + \");\n\n  console.log(`${opType === \"max\" ? \"Maximize\" : \"Minimize\"}: ${objectiveTerms}`);\n\n  console.log(\"Subject to:\");\n\n  for (const [constraintName, bounds] of Object.entries(constraints)) {\n    const terms = Object.entries(variables)\n      .map(([varName, coeffs]) => {\n        const coef = coeffs[constraintName] ?? 0;\n        return coef !== 0 ? `${coef}*${varName}` : null;\n      })\n      .filter(Boolean)\n      .join(\" + \");\n\n    if (bounds.hasOwnProperty(\"equal\")) {\n      console.log(`  ${terms} = ${bounds.equal}   (${constraintName})`);\n    }\n    if (bounds.hasOwnProperty(\"max\")) {\n      console.log(`  ${terms} ≤ ${bounds.max}   (${constraintName})`);\n    }\n    if (bounds.hasOwnProperty(\"min\")) {\n      console.log(`  ${terms} ≥ ${bounds.min}   (${constraintName})`);\n    }\n  }\n\n  // List non-negativity constraints\n  const varNames = Object.keys(variables);\n  console.log(`${varNames.join(\", \")} ≥ 0`);\n}\n\nexport type CommGraphNode = {\n  x: number,\n  y: number,\n  type: GraphNodeType,\n  guideline?: number|undefined;\n};\n\n\nexport class CommGraph {\n  constructor(ioHeight: number) {\n    this.numGuidelines = 3;\n\n    this.ioHeight = ioHeight;\n\n    this.graph = new Graph({ type: 'undirected' });\n\n    for (let inputIdx = 0; inputIdx < ioHeight; inputIdx++) {\n      let [x, y] = this.getInputPos(inputIdx);\n      this.graph.addNode(CommGraph.mkInputKey(inputIdx), {type: GraphNodeType.Input, x, y});\n    }\n\n    for (let outputIdx = 0; outputIdx < ioHeight; outputIdx++) {\n      let [x, y] = this.getOutputPos(outputIdx);\n      this.graph.addNode(CommGraph.mkOutputKey(outputIdx), {type: GraphNodeType.Output, x, y});\n    }\n\n    this.nextId = 0;\n\n    this.useIlp = false;\n\n    // Totally valid since we have no edges.\n    this.routingLut = new Map();\n  }\n\n  static mkInputKey(inputIdx: number) {\n    return \"innd-\" + inputIdx;\n  }\n\n  static mkOutputKey(inputIdx: number) {\n    return \"outnd-\" + inputIdx;\n  }\n\n  static makeCompleteBipartiteGraph(ioHeight: number) {\n    let commGraph = new CommGraph(ioHeight);\n\n    for (let inputIdx = 0; inputIdx < ioHeight; inputIdx++) {\n      for (let outputIdx = 0; outputIdx < ioHeight; outputIdx++) {\n        commGraph.graph.addEdge(CommGraph.mkInputKey(inputIdx), CommGraph.mkOutputKey(outputIdx));\n      }\n    }\n    \n    commGraph.routeAllPermutations();\n\n    return commGraph;\n  }\n\n  setNumGuidelines(newNum: number) {\n    this.numGuidelines = newNum;\n\n    // Update terminal positions.\n    for (let inputIdx = 0; inputIdx < this.ioHeight; inputIdx++) {\n      this.graph.setNodeAttribute(CommGraph.mkInputKey(inputIdx), \"x\", this.getInputPos(inputIdx)[0]);\n    }\n    for (let outputIdx = 0; outputIdx < this.ioHeight; outputIdx++) {\n      this.graph.setNodeAttribute(CommGraph.mkOutputKey(outputIdx), \"x\", this.getOutputPos(outputIdx)[0]);\n    }\n\n    // Delete nodes on deleted guidelines.\n    let aboutToDie = this.graph.filterNodes((node, attributes) => (attributes.type === GraphNodeType.Internal && !!attributes.guideline && attributes.guideline >= newNum));\n    aboutToDie.forEach(node => this.graph.dropNode(node));\n\n    // Reroute.\n    this.routeAllPermutations();\n  }\n\n  getInputPos(inputIdx: number): Vec2 {\n    return [0, inputIdx];\n  }\n\n  getOutputPos(outputIdx: number): Vec2 {\n    return [this.numGuidelines+1, outputIdx];\n  }\n\n  centerX() {\n    return (this.numGuidelines+1)/2;\n  }\n\n  centerY() {\n    return (this.ioHeight-1)/2;\n  }\n\n  // Used for the brute force router.\n  // If successful, return the valences, else return null.\n  hasNoValence3Nodes(edges: string[], edgeSubset: Array<number>) {\n    let nodeValences = new Map();\n\n    function bumpValence(node: string) {\n      let current = nodeValences.get(node);\n      if (!current) {\n        current = 1;\n      } else {\n        current++;\n      }\n      nodeValences.set(node, current);\n\n      return current;\n    }\n\n    for (let edgeIdx = 0; edgeIdx < edgeSubset.length; edgeIdx++) {\n      if (edgeSubset[edgeIdx] != 0) {\n        let edge = edges[edgeIdx];\n\n        let valenceA = bumpValence(this.graph.source(edge));\n        let valenceB = bumpValence(this.graph.target(edge));\n\n        if (valenceA > 2 || valenceB > 2) {\n          return null;\n        }\n      }\n    }\n\n    return nodeValences;\n  }\n\n  // string[] = Array of nodes.\n  routePermutationIlp(perm: Permutation): string[][] | null {\n    let variables: {[key: string]: {[key: string]: number}} = {};\n    let constraints: {[key: string]: {\"equal\"?: number, \"max\"?: number, \"min\"?: number}} = {};\n    let ints:  {[key: string]: 1} = {};\n\n\n    function pathMod(key: string, pathIdx: number) {\n      return \"p\" + pathIdx.toString() + \"-\" + key;\n    }\n\n    function mkEdgeVarKey(edge: string, pathIdx: number) {\n      // TODO: Should escape the edge key?\n      return pathMod(edge + \"-var\", pathIdx);\n    }\n    \n    for (let inputIdx = 0; inputIdx < this.ioHeight; inputIdx++) {\n      let inputNode = CommGraph.mkInputKey(inputIdx);\n      let outputNode = CommGraph.mkOutputKey(perm.lut[inputIdx]);\n\n      function isInTermPair(node: string) {\n        return node === inputNode || node === outputNode;\n      }\n\n      this.graph.forEachEdge((edge, attribs) => {\n        let edgeKey = mkEdgeVarKey(edge, inputIdx);\n        let binEqnKey = pathMod(edge + \"-b-eqn\", inputIdx);\n\n        variables[edgeKey] = { \"objective\": 0 };\n        variables[edgeKey][binEqnKey] = 1;\n\n        ints[edgeKey] = 1;\n        constraints[binEqnKey] = { \"max\": 1 };\n      });\n\n      // Add the edge inequalities.\n      let doIncidentCoeffs = (eqnKey: string, edge: string|undefined, node: string) => {\n        if (isInTermPair(node)) {\n          constraints[eqnKey][\"min\"]!--;\n        }\n\n        this.graph.forEachEdge(node, (atEdge, atAttrs, atSource, atTarget) => {\n          if (edge !== atEdge) {\n            let incEdgeKey = mkEdgeVarKey(atEdge, inputIdx);\n            if (!variables[incEdgeKey][eqnKey]) {\n              variables[incEdgeKey][eqnKey] = 0;\n            }\n            variables[incEdgeKey][eqnKey]++;\n          }\n        });\n      }\n\n      this.graph.forEachEdge((edge, attrs, source, target) => {\n        let edgeKey = mkEdgeVarKey(edge, inputIdx);\n        let eqnKey = pathMod(edge + \"-e-eqn\", inputIdx);\n        variables[edgeKey][eqnKey] = -2;\n        constraints[eqnKey] = { \"min\": 0 };\n\n        doIncidentCoeffs(eqnKey, edge, source);\n        doIncidentCoeffs(eqnKey, edge, target);\n      });\n\n      // Add the cycle-valence bounds for the nodes.\n      function mkVertEqnKey(node: string) {\n        return pathMod(node + \"-v-eqn\", inputIdx);\n      }\n\n      this.graph.forEachNode((node, attribs) => {\n        let eqnKey = mkVertEqnKey(node);\n\n        constraints[eqnKey] = { \"max\": isInTermPair(node) ? 1 : 2 };\n\n        this.graph.forEachEdge(node, (atEdge, atAttrs, atSource, atTarget) => {\n          let edgeKey = mkEdgeVarKey(atEdge, inputIdx);\n          variables[edgeKey][eqnKey] = 1;\n        });\n      });\n\n      // Add equations for the augmentation edge. These n equations are the only part of\n      // the system that are sensitive to the permutation.\n      for (let inputIdx = 0; inputIdx < this.ioHeight; inputIdx++) {\n        let eqnKey = pathMod(inputIdx.toString() + \"-perm-eqn\", inputIdx);\n\n        constraints[eqnKey] = { \"min\": 0 };\n        doIncidentCoeffs(eqnKey, undefined, inputNode);\n        doIncidentCoeffs(eqnKey, undefined, outputNode);\n        constraints[eqnKey] = { \"min\": 2 };\n      }\n    }\n\n    // Add vertex-disjointness constraints for all the paths.\n    this.graph.forEachNode((node, attribs) => {\n      let eqnKey = node + \"-dj-eqn\";\n\n      constraints[eqnKey] = { \"max\": attribs.type === GraphNodeType.Internal ? 2 : 1 };\n\n      this.graph.forEachEdge(node, (atEdge, atAttrs, atSource, atTarget) => {\n        for (let inputIdx = 0; inputIdx < this.ioHeight; inputIdx++) {\n          let edgeKey = mkEdgeVarKey(atEdge, inputIdx);\n          variables[edgeKey][eqnKey] = 1;\n        }\n      });\n    });\n\n    const model = {\n      optimize: 'objective',\n      opType: 'min',\n      constraints,\n      variables,\n      ints\n    };\n\n    printLPModel(model as LPModel);\n\n    const result = solver.Solve(model);\n    console.log(result);\n\n    if (!result.feasible) {\n      return null;\n    }\n\n    // Else, reconstruct the paths in a more user-friendly format.\n\n    let permutationPaths = [];\n    for (let inputIdx = 0; inputIdx < this.ioHeight; inputIdx++) {\n      let path: string[] = [CommGraph.mkInputKey(inputIdx)];\n      // Each iteration of the loop adds one node to the path.\n      for (;;) {\n        // Find all edges incident w/ the last node in the path.\n        let lastNode = path.at(-1) as string;\n\n        if (this.graph.getNodeAttribute(lastNode, \"type\") === GraphNodeType.Output) {\n          break;\n        }\n\n        let penultimateNode = path.at(-2);\n\n        for (let atEdge of this.graph.edges(lastNode)) {\n          let edgeKey = mkEdgeVarKey(atEdge, inputIdx);\n\n          // Check if the incident edge is in the subset.\n          if (result[edgeKey] === 1) {\n            let adjNode = this.graph.opposite(lastNode, atEdge);\n            // Don't go back.\n            if (adjNode !== penultimateNode) {\n              path.push(adjNode);\n              break;\n            }\n          }\n        };\n      }\n      permutationPaths.push(path);\n    }\n\n    console.log(permutationPaths);\n\n    return permutationPaths;\n  }\n\n  // string[] = Array of nodes.\n  routeAllPermutations(): Map<string, string[][]> {\n    if (this.useIlp) {\n      return this.routeAllPermutationsIlp();\n    } else {\n      return this.routeAllPermutationsBruteForce();\n    }\n  }\n\n  routeAllPermutationsIlp(): Map<string, string[][]> {\n    let routingLut = new Map<string, string[][]>();\n    let perms = allPerms(this.ioHeight);\n\n    for (let perm of perms) {\n      let routing = this.routePermutationIlp(perm);\n      if (routing) {\n        routingLut.set(perm.lut.toString(), routing);\n      }\n      \n      break;\n    }\n\n    this.routingLut = routingLut;\n    return routingLut;\n  }\n\n  routeAllPermutationsBruteForce(): Map<string, string[][]> {\n    // Indexed by stringified permutation luts.\n    let routingLut = new Map<string, string[][]>();\n    let edges = this.graph.edges();\n    // Build a mapping from edgeKey → index\n    let edgeIndexMap: Map<string, number> = new Map();\n    edges.forEach((edgeKey, idx) => {\n      edgeIndexMap.set(edgeKey, idx);\n    });\n    foreachNaryString(edges.length, 2, (edgeSubset: Array<number>) => {\n      // TODO(optimize): We don't need a full recomputation of the valences here.\n      let valences = this.hasNoValence3Nodes(edges, edgeSubset);\n      if (!valences) {\n        return false;\n      }\n\n      // This is a special subgraph, it is a collection of vertex-disjoint paths.\n\n      // Make sure the input and output nodes are terminal and being connected.\n      for (let inputIdx = 0; inputIdx < this.ioHeight; inputIdx++) {\n        if (valences.get(CommGraph.mkInputKey(inputIdx)) !== 1) {\n          return false;\n        }\n      }\n\n      for (let outputIdx = 0; outputIdx < this.ioHeight; outputIdx++) {\n        if (valences.get(CommGraph.mkOutputKey(outputIdx)) !== 1) {\n          return false;\n        }\n      }\n\n      // Let's simultaneously record the route in a more user-friendly format, and find out\n      // if it corresponds to a permutation. (We still have the possibility of input paths not reaching outputs)\n      let permutationLut = [];\n      let permutationPaths = [];\n      for (let inputIdx = 0; inputIdx < this.ioHeight; inputIdx++) {\n        let path: string[] = [CommGraph.mkInputKey(inputIdx)];\n        // Each iteration of the loop adds one node to the path.\n        for (;;) {\n          // Find all edges incident w/ the last node in the path.\n          let lastNode = path.at(-1) as string;\n          let penultimateNode = path.at(-2);\n\n          let foundNewPathNode = false;\n          for (let incidentEdge of this.graph.edges(lastNode)) {\n            // Check if the incident edge is in the subset.\n            if (edgeSubset[edgeIndexMap.get(incidentEdge)!]) {\n              let adjNode = this.graph.opposite(lastNode, incidentEdge);\n              // Don't go back.\n              if (adjNode !== penultimateNode) {\n                path.push(adjNode);\n                // There is at most one incident edge in the subset.\n                foundNewPathNode = true;\n                break;\n              }\n            }\n          }\n\n          if (!foundNewPathNode) {\n            // We have retraced the entirety of the path.\n            break;\n          }\n        }\n\n        // Now check if the path terminates at an output node.\n        let pathIsSane = false;\n        for (let outputIdx = 0; outputIdx < this.ioHeight; outputIdx++) {\n          let node = CommGraph.mkOutputKey(outputIdx);\n          let lastNode = path.at(-1) as string;\n          if (lastNode === node) {\n            permutationLut.push(outputIdx);\n            pathIsSane = true;\n            break;\n          }\n        }\n\n        if (!pathIsSane) {\n          // Ditch the entire subset.\n          return false;\n        }\n\n        permutationPaths.push(path);\n      }\n\n      routingLut.set(permutationLut.toString(), permutationPaths);\n\n      // Return false, since we want to route all permutations.\n      return false;\n    });\n\n    this.routingLut = routingLut;\n    return routingLut;\n  }\n\n  getNextId() {\n    return this.nextId++;\n  }\n\n  /*\n  deleteNode(node: CommGraphNode) {\n    // Delete edges containing the node.\n    // Remove all elements greater than 3, in-place\n    for (let i = this.edges.length - 1; i >= 0; i--) {\n      if (this.edges[i].target === node || this.edges[i].source === node) {\n        this.edges.splice(i, 1);\n      }\n    }\n    \n    for (let i = this.nodes.length - 1; i >= 0; i--) {\n      if (this.nodes[i] === node) {\n        this.nodes.splice(i, 1);\n      }\n    }\n  }\n\n  deleteEdge(edge: CommGraphEdge) {\n    for (let i = this.edges.length - 1; i >= 0; i--) {\n      if (this.edges[i] === edge) {\n        this.edges.splice(i, 1);\n      }\n    }\n  }*/\n\n  nextId: number;\n\n  ioHeight: number;\n\n  graph: Graph<CommGraphNode>;\n\n  numGuidelines: number;\n\n  // For every perm.lut.toString(), we get a table mapping input indices to node arrays.\n  routingLut: Map<string, string[][]>;\n\n  useIlp: boolean;\n}\n","import React, { useLayoutEffect, useReducer, useRef } from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport '@/styles/index.css';\nimport { useState } from \"react\";\nimport { Splitter, SplitterPanel } from 'primereact/splitter';\nimport { InputNumber, InputNumberValueChangeEvent } from 'primereact/inputnumber';\nimport { PrimeReactProvider } from 'primereact/api';\nimport \"primereact/resources/themes/lara-dark-teal/theme.css\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { initMacros, KI } from \"../common/katex\";\nimport Construction from \"./Construction\";\nimport Permutation, { allPerms } from \"../common/Permutation\";\nimport { inputColor, outputColor } from \"../common/Colors\";\nimport { GraphToolbarPanel, ToolSel } from '../common/Toolbar';\nimport { CommGraph, CommGraphNode } from './CommGraph';\nimport * as d3 from \"d3\";\nimport { Check, X } from 'lucide-react';\nimport { ProgressBar } from 'primereact/progressbar';\nimport { FullscreenButton } from '@/common/FullscreenButton';\n\ntype Config = {\n  ioHeight: number,\n  perms: Permutation[],\n  selPerm: Permutation,\n  commGraph: CommGraph\n}\n\nfunction configFromIoHeight(ioHeight: number): Config {\n  return {\n    ioHeight,\n    perms: allPerms(ioHeight),\n    selPerm: new Permutation([...Array(ioHeight).keys()]),\n    commGraph: CommGraph.makeCompleteBipartiteGraph(ioHeight)\n  }\n}\n\nfunction PermLists({config, setConfig}: {config: Config, setConfig: Function} ) {\n  let selPerm = config.selPerm;\n\n  function drawPermList(perm: Permutation, perms: Permutation[]) {\n    let items = perms.map((atPerm) => (\n      <div className={`text-center w-full cursor-pointer rounded-lg p-1 shadow-md hover:shadow-xl active:bg-gray-900 hover:bg-gray-400/10 transition text-white\n            ${atPerm.lut.toString() === perm.lut.toString()\n          ? \"bg-gray-700\"\n          : \"bg-gray-700/10\"}\n            ${config.commGraph.routingLut.get(atPerm.lut.toString()) ? \"\" : \"border border-red-500\"}\n          `}\n        onClick={() => setConfig({...config, selPerm: atPerm})}\n        key={atPerm.lut.toString()}>\n        <KI>{atPerm.toLatex()}</KI>\n      </div>));\n\n      return <div className=\"grid grid-cols-[repeat(auto-fit,_minmax(50px,_1fr))] gap-4 p-4\">\n        {items}\n      </div>\n  }\n  \n  let goodPerms = [];\n  let badPerms = [];\n  for (let atPerm of config.perms) {\n    let routing = config.commGraph.routingLut.get(atPerm.lut.toString());\n\n    if (routing) {\n      goodPerms.push(atPerm);\n    } else {\n      badPerms.push(atPerm);\n    }\n  }\n\n  return <>\n    <span className=\"text-sm mb-1 flex row font-bold\">\n      <X className=\"text-red-500\" /> Unroutable permutations:\n    </span>\n    {selPerm && badPerms.length > 0 ? drawPermList(selPerm, badPerms) : \"None!\"}\n\n    <span className=\"text-sm flex row mb-1 font-bold\">\n      <Check className=\"text-green-500\" /> Routable permutations:\n    </span>\n    <div className=\"relative w-full\">\n      <ProgressBar value={100 * goodPerms.length / config.perms.length} className=\"h-6\" showValue={false} />\n      <span className=\"absolute inset-0 flex items-center justify-center text-sm font-medium text-white drop-shadow-[0_0_2px_black]\">\n        <KI>{`${goodPerms.length} / ${config.perms.length}=${config.ioHeight}!`}</KI>\n      </span>\n    </div>\n    {selPerm && goodPerms.length > 0 ? drawPermList(selPerm, goodPerms) : \"None, get to work!\"}\n  </>;\n}\n\nfunction Main()\n{\n  let [config, setConfig] = useState<Config>(() => configFromIoHeight(3));\n  let commGraph = config.commGraph;\n\n  let [tool, setTool] = useState<ToolSel>('insert');\n\n  let [, forceUpdate] = useReducer(x => x + 1, 0);\n\n  let ref = useRef(null);\n\n  // Physics code, disabled for now.\n  /*\n\n  function ticked() {\n    forceUpdate();\n  }\n\n  useLayoutEffect(() => {\n    let sim = d3.forceSimulation(graph.nodes)\n\n    sim.on(\"tick\", ticked);\n    sim.force(\"charge\", d3.forceManyBody());\n    sim.force(\"springs\", d3.forceLink(graph.edges));\n    sim.force(\"x\", d3.forceX(graph.centerX()));\n    sim.force(\"y\", d3.forceY(graph.centerY()));\n\n    setSimulation(sim);\n  }, [ref]);\n\n  function reheat(graph: CommGraph) {\n    simulation?.nodes(graph.nodes).alpha(1).restart();\n    forceUpdate();\n  }\n    */\n\n  return <Splitter className=\"h-dvh w-full\" ref={ref}>\n    <SplitterPanel size={60} className=\"overflow-hidden\">\n      <GraphToolbarPanel activeTool={tool} onChange={setTool}>\n        \n        <div className=\"flex-1\">\n          <Construction tool={tool} commGraph={commGraph} perm={config.selPerm} onChange={() => forceUpdate()} onPermChanged={(newPerm) => setConfig({ ...config, selPerm: newPerm })} />\n        </div>\n      </GraphToolbarPanel>\n    </SplitterPanel>\n    <SplitterPanel size={40} className=\"\">\n      <div className=\"pl-7 pr-7 space-y-4 overflow-auto\">\n        <h1 className=\"text-xl font-bold my-4 font-italic\">Communication Network Construction</h1>\n\n        <div className=\"text-sm\">\n          <label className=\"block mb-1 font-bold\" htmlFor=\"vertical\">Routing:</label>\n\n          <SelectButton className=\"w-full\" value={commGraph.useIlp ? \"ILP\" : \"Brute-Force\"} onChange={(e: any) => {commGraph.useIlp = (e.value == \"ILP\"); setConfig({...config});}} options={[\"ILP\", \"Brute-Force\"]} />\n        </div>\n\n        <p>\n          A communication network is an graph with special nodes: <span style={{ color: inputColor }}><KI>n</KI> \"input nodes\"</span> and <span style={{ color: outputColor }}>\"output nodes\"</span>\n        </p>\n\n        <p>\n          We refer to <KI>n</KI> as the height of the communication network.\n        </p>\n\n        <p>\n          We say it is uncongested if any bijection <KI>\\pi \\in S_n</KI> from its <span style={{color: inputColor}}><KI>n</KI> input nodes</span> to its <span style={{color: outputColor}}><KI>n</KI> output nodes</span> can be realized by vertex-disjoint paths.\n          A set of such paths(or routes) is called a routing. You can click and drag the permutation arrows to modify the permutation, or alternatively, dial one of the permutations in the list below. Try it!\n        </p>\n\n        <div className=\"text-sm\">\n          <label className=\"block mb-1 font-bold\" htmlFor=\"inputHeight\">Height <KI>n</KI>:</label>\n\n          <InputNumber className=\"\" name=\"inputHeight\" value={config.ioHeight} onValueChange={(e: InputNumberValueChangeEvent) => {\n            let val = e.value;\n            if (val && !isNaN(val)) {\n              let newConfig = configFromIoHeight(val);\n              setConfig(newConfig);\n              forceUpdate();\n            }\n          }} mode=\"decimal\" showButtons min={1} max={5} />\n        </div>\n\n        <p>\n          This playground lets you construct \"good\" uncongested communication networks (Even though it may be a good warm-up to construct a bad one first.)\n          Your current network has <KI>{`${commGraph.graph.order} \\\\geq 2n=${2*config.ioHeight}`}</KI> nodes and <KI>{`${commGraph.graph.size}`}</KI> edges.\n        </p>\n\n        <p>\n          For convenience, nodes snap to vertical equispaced guidelines. You can set the number of guidelines below.\n        </p>\n        \n        <div className=\"text-sm\">\n          <label className=\"block mb-1 font-bold\" htmlFor=\"inputHeight\">Number of guidelines:</label>\n\n          <InputNumber className=\"\" name=\"inputHeight\" value={commGraph.numGuidelines} onValueChange={(e: InputNumberValueChangeEvent) => {\n            let val = e.value;\n            if (val && !isNaN(val)) {\n              commGraph.setNumGuidelines(val);\n              forceUpdate();\n              setConfig({...config});\n            }\n          }} mode=\"decimal\" showButtons min={1} max={8} />\n        </div>\n\n        <PermLists config={config} setConfig={setConfig} />\n      </div>\n    </SplitterPanel>\n  </Splitter>;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\ninitMacros();\nroot.render(\n  <React.StrictMode>\n    <PrimeReactProvider>\n      {/* A fixed pos seems to be necessary to get rid of some strange scrollbars */}\n      <div className=\"fixed flex overflow-hidden h-dvh w-full\">\n        <Main />\n        <FullscreenButton />\n      </div>\n    </PrimeReactProvider>\n  </React.StrictMode>\n);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.j = 276;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t276: 0,\n\t869: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkreact_ts_tailwind_starter\"] = self[\"webpackChunkreact_ts_tailwind_starter\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [869,967,810,76], () => (__webpack_require__(8472)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Construction","_ref","perm","commGraph","onChange","tool","onPermChanged","cnv","useGraphCanvas","draggedNode","setDraggedNode","useState","edgeInteraction","setEdgeInteraction","mousePos","setMousePos","margin","computeGridMargins","graphWidth","numGuidelines","graphHeight","ioHeight","gridWidths","computeWeightedLayout","screenWidth","left","right","gridHeights","screenHeight","top","bottom","graphBox","Box","grid","Grid","zoom","Math","min","vertical","handleMouseDown","e","node","edge","ex","ey","getEventPoint","type","graph","getNodeAttribute","undefined","fromNode","stopPropagation","preventDefault","x","clipToRange","xFromScreen","y","yFromScreen","id","getNextId","addNode","GraphNodeType","Internal","guideline","routeAllPermutations","dropNode","dropEdge","reassignNodePosition","draggedAttr","getNodeAttributes","handleMouseUp","addEdge","graphCanvas","labels","canvas","guidelineIdx","fromX","fromY","toScreen","extent","toX","toY","line","_jsx","x1","x2","y1","y2","stroke","strokeWidth","onMouseDown","push","forEachEdge","edgeId","attributes","source","target","src","tgt","className","paths","routingLut","get","lut","toString","colorScale","getColorScale","length","pathIdx","path","entries","nodeIdx","strokeOpacity","circ","cx","cy","r","fill","midColor","fillOpacity","forEachNode","attrs","cursor","drawNode","graphNodeTypeToColor","onMouseUp","drawGraph","svg","_jsxs","width","height","children","ref","dummyRectRef","opacity","permWidget","PermWidget","onHover","onLeave","enableTransition","xyToIdx","idxToXY","idx","applyTerminalBias","style","flexDirection","onMouseMove","solver","require","CommGraph","constructor","this","Graph","inputIdx","getInputPos","mkInputKey","Input","outputIdx","getOutputPos","mkOutputKey","Output","nextId","useIlp","Map","makeCompleteBipartiteGraph","setNumGuidelines","newNum","setNodeAttribute","filterNodes","forEach","centerX","centerY","hasNoValence3Nodes","edges","edgeSubset","nodeValences","bumpValence","current","set","edgeIdx","valenceA","valenceB","routePermutationIlp","variables","constraints","ints","pathMod","key","mkEdgeVarKey","inputNode","outputNode","isInTermPair","attribs","edgeKey","binEqnKey","doIncidentCoeffs","eqnKey","atEdge","atAttrs","atSource","atTarget","incEdgeKey","mkVertEqnKey","model","optimize","opType","Object","map","varName","coeffs","c","filter","Boolean","join","constraintName","bounds","_ref2","coef","hasOwnProperty","keys","printLPModel","result","Solve","feasible","permutationPaths","lastNode","at","penultimateNode","adjNode","opposite","routeAllPermutationsIlp","routeAllPermutationsBruteForce","perms","allPerms","routing","edgeIndexMap","foreachNaryString","valences","permutationLut","foundNewPathNode","incidentEdge","pathIsSane","configFromIoHeight","selPerm","Permutation","Array","PermLists","config","setConfig","drawPermList","items","atPerm","onClick","KI","toLatex","goodPerms","badPerms","_Fragment","X","Check","ProgressBar","value","showValue","Main","setTool","forceUpdate","useReducer","useRef","Splitter","SplitterPanel","size","GraphToolbarPanel","activeTool","newPerm","htmlFor","SelectButton","options","color","inputColor","outputColor","InputNumber","name","onValueChange","val","isNaN","newConfig","mode","showButtons","max","order","root","ReactDOM","document","getElementById","initMacros","render","React","PrimeReactProvider","FullscreenButton","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","every","splice","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","obj","prop","prototype","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","bind","__webpack_exports__"],"sourceRoot":""}