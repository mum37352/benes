{"version":3,"file":"benes.3b78e27ab29da9890b77.js","mappings":"uBAAIA,E,6CCAW,MAAMC,EACnBC,WAAAA,CAAYC,GACVC,KAAKD,IAAM,IAAIA,GAGfC,KAAKC,OAASC,MAAcH,EAAII,QAChC,IAAK,IAAIC,EAAI,EAAGA,EAAIL,EAAII,OAAQC,IAC9BJ,KAAKC,OAAOF,EAAIK,IAAMA,CAE1B,CAEAC,MAAAA,GACE,IAAIC,EAAON,KAAKC,OAChBD,KAAKC,OAASD,KAAKD,IACnBC,KAAKD,IAAMO,CACb,EAMK,SAASC,EAAWC,EAAgBC,GACzC,OAAOC,KAAKC,IAAIF,EAAS,EAAGC,KAAKE,IAAI,EAAGF,KAAKG,MAAML,IACrD,C,6DCpBO,IAAIM,EAAkB,UAClBC,EAAa,UACbC,EAAc,UACdC,EAAW,UACXC,EAAW,UACXC,EAAc,UAOlB,SAASC,EAAcC,GAC5B,OAAOC,EAAAA,MAAqBC,OAAO,CAAC,EAAEF,IAAaG,cALzBC,EAKyD,CAAC,UAAW,UAAW,UAAW,UAAW,UAAW,UAAW,WAJ9IC,GAAcJ,EAAAA,IAAaA,EAAAA,IAAmBG,EAAhCH,CAAyCZ,KAAKC,IAAID,KAAKE,IAAI,EAAGc,GAAI,MAD1F,IAA4BD,CAM5B,C,4CCPA,MAAME,EACJ7B,WAAAA,CAAY8B,EAAcC,EAAaC,EAAeC,GACpD/B,KAAK6B,IAAMA,EACX7B,KAAK+B,OAASA,EACd/B,KAAK4B,KAAOA,EACZ5B,KAAK8B,MAAQA,CACf,CAEAE,GAAAA,CAAIC,GACFjC,KAAK4B,MAAQK,EACbjC,KAAK6B,KAAOI,EACZjC,KAAK8B,OAASG,EACdjC,KAAK+B,QAAUE,CACjB,CAEAC,KAAAA,CAAMC,EAAmCC,GACvCpC,KAAK8B,MAAQK,EAAEnC,KAAK8B,OACpB9B,KAAK4B,KAAOO,EAAEnC,KAAK4B,MACnB5B,KAAK6B,IAAMO,EAAEpC,KAAK6B,KAClB7B,KAAK+B,OAASK,EAAEpC,KAAK+B,OACvB,CAEAM,KAAAA,GACE,OAAOrC,KAAK8B,MAAQ9B,KAAK4B,IAC3B,CAEAnB,MAAAA,GACE,OAAOT,KAAK+B,OAAS/B,KAAK6B,GAC5B,EAUF,MAAMS,EACJxC,WAAAA,CAAYyC,EAAeX,EAAcC,EAAaW,GACpDxC,KAAKuC,MAAQA,EACbvC,KAAKqC,MAAQ,EAAEE,EACfvC,KAAKS,OAAS,GAAG8B,EACjBvC,KAAK4B,KAAOA,EACZ5B,KAAK6B,IAAMA,EACX7B,KAAKwC,GAAKA,CACZ,CAEAC,OAAAA,CAAQC,GACN,OAAiB,GAAVA,CACT,CAEAC,QAAAA,CAASD,GACP,OAAOA,GAAU1C,KAAKqC,MAAQ,CAChC,CAEAO,WAAAA,CAAYF,GACV,OAAOA,GAAU1C,KAAKqC,MAAM,CAC9B,CAEAQ,UAAAA,CAAWH,GACT,OAAO1C,KAAK2C,SAASD,IAAW1C,KAAKyC,QAAQC,EAC/C,CAEAI,OAAAA,CAAQJ,GACN,OAAO1C,KAAK4B,KAAOc,CACrB,CAEAK,OAAAA,CAAQC,GACN,OAAOhD,KAAK6B,IAAMmB,CACpB,CAEAC,SAAAA,GAEE,OADa,IAAIX,EAAOtC,KAAKuC,MAAQ,EAAGvC,KAAK8C,QAAQ,GAAI9C,KAAK+C,QAAQ,GAAI/C,KAAKwC,GAAG,IAEpF,CAEAU,YAAAA,GAEE,OADa,IAAIZ,EAAOtC,KAAKuC,MAAQ,EAAGvC,KAAK8C,QAAQ,GAAI9C,KAAK+C,QAAQ/C,KAAKS,OAAO,GAAIT,KAAKwC,GAAG,IAEhG,CAEAW,MAAAA,GACE,OAAO,IAAIxB,EAAI3B,KAAK8C,QAAQ,GAAI9C,KAAK+C,QAAQ,GAAI/C,KAAK8C,QAAQ9C,KAAKqC,MAAQ,GAAIrC,KAAK+C,QAAQ/C,KAAKS,OAAS,GAC5G,EAaF,MAAM2C,EACJtD,WAAAA,CAAYyC,EAAec,EAAmBC,GAC5CtD,KAAKuD,WAAa,IAAIjB,EAAOC,EAAO,EAAG,EAAG,IAC1C,IAAIY,EAASnD,KAAKuD,WAAWJ,SAE7BnD,KAAKqD,SAAWA,EAEhB,IAAKG,EAASC,GAAWzD,KAAK0D,gBAAgB,CAACP,EAAOvB,KAAMuB,EAAOrB,OAAQ,CAACqB,EAAOtB,IAAKsB,EAAOpB,SAC/F/B,KAAK2D,OAASrC,EAAAA,IAAekC,EAAS,CAACF,EAAU1B,KAAM0B,EAAUxB,QACjE9B,KAAK4D,OAAStC,EAAAA,IAAemC,EAAS,CAACH,EAAUzB,IAAKyB,EAAUvB,QAClE,CAEA2B,eAAAA,CAAmBvB,EAAMC,GACvB,OAAIpC,KAAKqD,SACA,CAACjB,EAAGD,GAEJ,CAACA,EAAGC,EAEf,CAEAyB,QAAAA,CAASC,EAAeC,GACtB,IAAKC,EAAUC,GAAYjE,KAAK0D,gBAAgBI,EAAOC,GACvD,MAAO,CAAC/D,KAAK2D,OAAOK,GAAWhE,KAAK4D,OAAOK,GAC7C,CAEAC,WAAAA,CAAYC,GACV,IAAIC,EAAS,IAAIzC,EAAI,EAAE,EAAE,EAAE,GAG3B,OAFCyC,EAAOxC,KAAMwC,EAAOvC,KAAO7B,KAAK6D,SAASM,EAAIvC,KAAMuC,EAAItC,MACvDuC,EAAOtC,MAAOsC,EAAOrC,QAAU/B,KAAK6D,SAASM,EAAIrC,MAAOqC,EAAIpC,QACtDqC,CACT,CAEAC,WAAAA,CAAYC,EAAiBC,GAC3B,IAAIH,EAASpE,KAAKqD,SAAWrD,KAAK2D,OAAOtD,OAAOiE,GAAWtE,KAAK4D,OAAOvD,OAAOkE,GAE9E,OADAH,GAAS7D,EAAAA,EAAAA,IAAW6D,EAAQpE,KAAKuD,WAAW9C,QACrC2D,CACT,EAOF,SAASI,EAAUC,EAAWC,GAC5B,IAAIC,EAAU,IAAMF,EAAE,GAClBL,EAASM,EAMb,OALIA,GAAOC,EACTP,GAAUO,EAEVP,GAAUO,EAELP,CACT,CAAC,IAEIQ,EAAS,SAATA,GAAS,OAATA,EAAAA,EAAS,aAATA,EAAAA,EAAS,mBAATA,EAAAA,EAAS,eAATA,CAAS,EAATA,GAAS,IAYd,SAASC,EAAiBJ,EAAWK,GAEnC,GAAU,IAANL,EACF,OAAoB,IAAhBK,EAAK/E,IAAI,GAEJ,CAAC,CAACgF,WAAY,CAACH,EAAUI,MAAOC,MAAO,CAAC,EAAG,IAAK,CAACF,WAAY,CAACH,EAAUI,MAAOC,MAAO,CAAC,EAAG,KAG1F,CAAC,CAACF,WAAY,CAACH,EAAUI,MAAOC,MAAO,CAAC,EAAG,IAAK,CAACF,WAAY,CAACH,EAAUI,MAAOC,MAAO,CAAC,EAAG,KAMrG,IAAIC,EAAY,GAAKT,EAEjBU,EAAqBjF,MAAMgF,GAE3BE,EAAa,IAAIC,IAAInF,MAAMgF,GAAWI,QAI1C,KAAOF,EAAWG,KAAO,GAAG,CAG1B,IAAIC,GAAgB,EACpB,IAAK,IAAIC,KAAML,EAAY,CACzBI,EAAOC,EACP,KACF,CACA,GAAID,EAAO,EAET,MAIF,IAAIE,EAAkB,GAOtB,IANAN,EAAWO,OAAOH,GAClBE,EAAME,KAAKJ,GACXL,EAAMK,GAAQ,CACZT,WAAY,CAACH,EAAUiB,KACvBZ,MAAO,CAACO,MAED,CACP,IAAIM,EAASJ,EAAMK,QACnB,QAAeC,IAAXF,EACF,MAGF,IACIG,EAAgB,EADNd,EAAMW,GAAQf,WAAW,GAGnCmB,EAAgB1B,EAAUC,EAAGqB,GAC7BK,EAAiBrB,EAAK7E,OAAOuE,EAAUC,EAAGK,EAAK/E,IAAI+F,KAEvD,IAAK,IAAIM,IAAY,CAACF,EAAeC,GAC/Bf,EAAWiB,IAAID,KACjBhB,EAAWO,OAAOS,GAClBjB,EAAMiB,GAAY,CAChBrB,WAAY,CAACkB,GACbhB,MAAO,CAACmB,IAEVV,EAAME,KAAKQ,GAGjB,CACF,CAEA,IAAIE,EAAO,CAACpG,MAAMgF,EAAU,GAAIhF,MAAMgF,EAAU,IAChD,IAAK,IAAIqB,EAAW,EAAGA,EAAWrB,EAAWqB,IAAY,CACvD,IAAIC,EAAcD,GAAYrB,EAAU,GACxCoB,EAAKnB,EAAMoB,GAAUxB,WAAW,IAAIyB,GAAe1B,EAAK/E,IAAIwG,IAAarB,EAAU,EACrF,CAEA,IAAIuB,EAAcH,EAAKI,KAAI3G,GAAO8E,EAAiBJ,EAAE,EAAG,IAAI5E,EAAAA,GAAYE,MAExE,IAAK,IAAI4G,EAAY,EAAGA,EAAYzB,EAAWyB,IAAa,CAC1D,IAAIH,EAAcG,GAAazB,EAAU,GACrC0B,EAAazB,EAAMwB,GACnBE,EAAYD,EAAW7B,WAAW,GAClC+B,EAAWD,EAAU3B,EAAU,EAEnC0B,EAAW7B,WAAWa,QAAQa,EAAYI,GAAWL,GAAazB,YAClE6B,EAAW3B,MAAMW,QAAQa,EAAYI,GAAWL,GAAavB,MAAMyB,KAAIK,GAAKA,EAAID,IAClF,CAGA,IAAK,IAAIP,EAAW,EAAGA,EAAWrB,EAAWqB,IAAY,CACvD,IAAIS,EAAO7B,EAAMoB,GACjBS,EAAKjC,WAAWa,KAAKoB,EAAKjC,WAAW,IACrCiC,EAAK/B,MAAMW,KAAKd,EAAK/E,IAAIwG,GAC3B,CAEA,OAAOpB,CACT,CAyBe,SAAS8B,EAAQC,GAQhC,IARiC,MAC/B3E,EAAK,SACLc,GAAW,EAAI,UACf8D,GAAY,EAAI,gBAChBC,GAAkB,EAAK,UACvBC,GAAY,EAAI,YAChBC,GAAc,GACmHJ,EAE7HK,EAAY,GAAGhF,EACfiF,GAAMC,EAAAA,EAAAA,QAAuB,OAC5BlC,EAAMmC,IAAWC,EAAAA,EAAAA,aACjB7C,EAAM8C,IAAWD,EAAAA,EAAAA,UAAS,IAAI9H,EAAAA,GAAY,IAAIK,MAAMqH,GAAWjC,UAIpEuC,EAAc,GACdC,EAAe,GAGXX,IACE9D,EACFyE,GAAgB,GAEhBD,GAAe,IAGnB,IAAIxF,EAAQkD,GAAMlD,OAAS,EACvB5B,EAAS8E,GAAM9E,QAAU,EACzB6C,EAAY,IAAI3B,EAXP,GAHG,GAc+BU,EAAQwF,EAAapH,EAASqH,GACzEC,EAAO,IAAI3E,EAAKb,EAAOc,EAAUC,IAGhC0E,EAAOC,IAAYN,EAAAA,EAAAA,UAASpF,GACjC,GAAIyF,GAASzF,EAGX,OAFA0F,EAAS1F,GACTqF,EAAQ,IAAI/H,EAAAA,GAAY,IAAIK,MAAMqH,GAAWjC,WACtC4C,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,KAITC,EAAAA,EAAAA,kBAAgB,KACdV,EAAQF,EAAIa,SAASC,wBAAwB,GAC5C,CAACd,IAEkB,oBAAXe,SACTC,EAAAA,EAAAA,GAAkBhB,GAAKiB,GAASf,EAAQe,EAAMC,eAGhD,IAAIC,EAAiB,GAIrB,SAASC,EAAkBtE,EAAiBC,EAAiB9B,GAC3D,IAAKN,EAAGC,GAAK2F,EAAKrE,gBAAgBY,EAASC,GAE3C,OADApC,GAAKM,GAAW,GAAK,GACdsF,EAAKrE,gBAAgBvB,EAAGC,EACjC,CAIA,IAAK,IAAI0B,EAAQ,EAAGA,EAAQiE,EAAKxE,WAAWlB,MAAOyB,IAAS,CAC1D,IAAIrB,EAAUsF,EAAKxE,WAAWd,QAAQqB,GAClCjB,EAAakF,EAAKxE,WAAWV,WAAWiB,GAExC+E,EAAQd,EAAKxE,WAAWX,YAAYkB,GAAS9C,EAAcD,EAC/D,IAAK,IAAIgD,EAAQ,EAAGA,EAAQgE,EAAKxE,WAAW9C,OAAQsD,IAAS,CAC3D,IAAKO,EAASC,GAAWwD,EAAKlE,SAASC,EAAOC,GAE1ClB,KACDyB,EAASC,GAAWqE,EAAkBtE,EAASC,EAAS9B,IAI3DkG,EAAQ/C,MAAKsC,EAAAA,EAAAA,KAAA,UAEXY,GAAIxE,EAASyE,GAAIxE,EACjByE,OAAO,OACPC,EAAGpG,EAAa,GAAK,EAAGqG,KAAML,GAHzB/E,EAAQ,IAAMC,GAIvB,CACF,CAEA,SAASoF,EAAiBC,EAAcC,EAAgBlG,EAAajC,EAAkBC,EAAqBmI,GAC1G,IAAIC,EAAQC,EAAQC,EAASC,EAAU,GASvC,SAASC,EAAQC,EAAiBC,EAAeC,EAAeC,EAAaC,EAAahB,GACxF,IAAKiB,EAAIC,GAAMnC,EAAKlE,SAASgG,EAAOC,IAASK,EAAIC,GAAMrC,EAAKlE,SAASkG,EAAKC,GAC1EZ,EAAMxD,MAAKsC,EAAAA,EAAAA,KAAA,QAAiC+B,KAAIC,KAAIC,KAAIC,KAAMC,cAAe,GAAKrB,OAAQA,EAAQsB,YAAa,GAAzFjB,EAAOO,GAC/B,CAXIN,GACFC,EAASE,EAAUvI,EACnBsI,EAASE,EAAUvI,IAEnBoI,EAASG,EAAUxI,EACnBsI,EAASC,EAAUtI,GASrBwI,EAAQ,IAAKxG,EAAOvB,KAAMuB,EAAOtB,IAAKsB,EAAOrB,MAAOqB,EAAOtB,IAAK0H,GAEhEI,EAAQ,IAAKxG,EAAOvB,KAAMuB,EAAOpB,OAAQoB,EAAOrB,MAAOqB,EAAOpB,OAAQyH,GAEtEG,EAAQ,IAAKxG,EAAOvB,KAAMuB,EAAOtB,IAAKsB,EAAOrB,MAAOqB,EAAOpB,OAAQ0H,GAEnEE,EAAQ,IAAKxG,EAAOvB,KAAMuB,EAAOpB,OAAQoB,EAAOrB,MAAOqB,EAAOtB,IAAK6H,EACrE,CAmDA,IAAIa,EAAoB,GACpBC,EAAoB,IAlDxB,SAASC,EAAaF,EAAmBC,EAAmBE,GAC1D,GAAqB,IAAjBA,EAAOnI,MACT4G,EAAiBoB,EAAYG,EAAOlI,GAAG,MAAOkI,EAAOvH,SAAUlC,EAAUA,GAAU,OAC9E,CACL,IAAIgC,EAAYyH,EAAOzH,YACnBC,EAAewH,EAAOxH,eAGtByH,EAAY,GAEZC,EAAS7C,EAAK7D,YAAYjB,EAAUE,UACpC0H,EAAY9C,EAAK7D,YAAYhB,EAAaC,UAE9CyH,EAAO5I,IAAI2I,GACXE,EAAU7I,IAAI2I,GAKdH,EAAW5E,MAAKsC,EAAAA,EAAAA,KAAA,QAA8B4C,GAAI,GAAIC,GAAI,GAAI5I,EAAGyI,EAAOhJ,KAAMQ,EAAGwI,EAAO/I,IAAKQ,MAAOuI,EAAO9I,MAAQ8I,EAAOhJ,KAAMnB,OAAQmK,EAAO7I,OAAS6I,EAAO/I,IAAKmH,OAAQ,OAAQE,KAAM,kBAAmB8B,YAAa,IAA/L,KAAK/H,EAAUT,KAC1CgI,EAAW5E,MAAKsC,EAAAA,EAAAA,KAAA,QAAiC4C,GAAI,GAAIC,GAAI,GAAI5I,EAAG0I,EAAUjJ,KAAMQ,EAAGyI,EAAUhJ,IAAKQ,MAAOwI,EAAU/I,MAAQ+I,EAAUjJ,KAAMnB,OAAQoK,EAAU9I,OAAS8I,EAAUhJ,IAAKmH,OAAQ,OAAQE,KAAM,kBAAmB8B,YAAa,IAApN,KAAK9H,EAAaV,KAG7CiI,EAAaF,EAAYC,EAAYvH,GAErCwH,EAAaF,EAAYC,EAAYtH,GAIrC,IAAK,IAAI+H,EAAY,EAAGA,EAAYhI,EAAUxC,OAAQwK,IAAa,CAEjE,IAAIC,EAAY,IAAIvJ,EAAI,EAAG,EAAG,EAAG,GACjCuJ,EAAUrJ,IAAMoB,EAAUF,QAAQkI,GAClCC,EAAUnJ,OAASmB,EAAaH,QAAQkI,GAGxCC,EAAUtJ,KAAO8I,EAAOvH,SAASvB,KACjCsJ,EAAUpJ,MAAQmB,EAAUE,SAASvB,KACrCuH,EAAiBoB,EAAYG,EAAOlI,GAAG,SAASyI,EAAU,IAAKC,EAAWhK,EAAUC,GAAa,GAGjG+J,EAAUpJ,MAAQ4I,EAAOvH,SAASrB,MAClCoJ,EAAUtJ,KAAOqB,EAAUE,SAASrB,MACpCqH,EAAiBoB,EAAYG,EAAOlI,GAAG,SAASyI,EAAU,IAAKC,EAAWhK,EAAUC,GAAa,EACnG,CACF,CACF,CAKAsJ,CAAaF,EAAYC,EAAYzC,EAAKxE,YAgD1C,IAEI4H,EAAsB,IAhD1B,SAAqBA,EAAqBC,EAAsB3G,GAC9D,IAAIS,EAAY,GAAKT,EACrB,IAAI4G,EAAajK,EAAc8D,EAAU,GAEzC,IAAK,IAAIqB,EAAW,EAAGA,EAAWrB,EAAWqB,IAAY,CACvD,IAAI+E,EAAYD,EAAW9E,GAEvBS,EAAOoE,EAAQ7E,GAEnB,IAAK,IAAIgF,EAAU,EAAGA,EAAUvE,EAAKjC,WAAW5E,OAAQoL,IAAW,CACjE,IAAKtB,EAAIC,GAAMnC,EAAKlE,SAAS0H,EAASvE,EAAK/B,MAAMsG,KAC5CpB,EAAIC,GAAMrC,EAAKlE,SAAS0H,EAAQ,EAAGvE,EAAK/B,MAAMsG,EAAQ,IAEvD1E,EAAYG,EAAKjC,WAAWwG,GAC5BC,EAAYvK,EACXmG,EAEMP,IAAcjC,EAAUiB,IACjC2F,EAAYtK,EACH2F,IAAcjC,EAAU6G,SACjCD,EAAYrK,GAJZqK,EAAYF,EAAUI,WAOxBP,EAAavF,MAAKsC,EAAAA,EAAAA,KAAA,QAChB,iBAAe,QAEf+B,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAAIC,GAAIA,EAC5BlB,KAAK,OACLoB,YAAY,IACZqB,gBAAiBrE,EAAc,QAAU,GACzC0B,OAAQwC,EAAUI,SAEjBtE,IACCY,EAAAA,EAAAA,KAAA,WACE2D,cAAc,oBACdC,OAAO,OACPC,IAAI,KACJC,SAAS,SACTC,YAAY,gBAbX,MAAM1F,KAAYgF,KAgB3B,CACF,CACF,CAMAW,CAAYf,EAHEtG,EAAiBtC,EAAOuC,GAGHvC,GAsCnC,IAAI4J,EAAgB,GAChBC,EAAuB,IArC3B,SAAyBC,GACvB,IAAK,IAAI9F,EAAW,EAAGA,EAAWwB,EAAKxE,WAAW9C,OAAQ8F,IAAY,CACpE,IAAKpE,EAAGC,GAAKwG,KAAqBb,EAAKlE,SAAS,EAAG0C,IAAW,GAE9D8F,EAAYzG,MACVsC,EAAAA,EAAAA,KAAA,OACAoE,UAAU,oCAEVC,MAAO,CACLC,UAAW,mCAAmCrK,QAAQC,OACtDyG,MAAO/H,GACP8K,UACA1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAE,GAAGrF,EAAS,OALd,MAAQA,GAOjB,CACF,CAuBAmG,CAAgBP,GArBhB,SAA0BQ,GACxB,IAAK,IAAIC,EAAW,EAAGA,EAAW7E,EAAKxE,WAAW9C,OAAQmM,IAAY,CACpE,IAAIC,EAAY/H,EAAK/E,IAAI6M,IACpBzK,EAAGC,GAAKwG,KAAqBb,EAAKlE,SAASkE,EAAKxE,WAAWJ,SAASrB,MAAO+K,IAAY,GAG5FF,EAAa/G,MACXsC,EAAAA,EAAAA,KAAA,OAEAoE,UAAU,+BACVC,MAAO,CACLC,UAAW,mCAAmCrK,QAAQC,OACtDyG,MAAO/H,GACP8K,UACA1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAE,GAAGiB,EAAU,OANf,MAAQD,EAASlB,YAQ1B,CACF,CAKAoB,CAAiBX,GACbhF,GACFgF,EAAOvG,QAAQwG,GAGjB,IAAIW,GAAMC,EAAAA,EAAAA,MAAA,OAAKV,UAAU,WAAWjK,MAAOA,EAAO5B,OAAQA,EAAOmL,SAAA,EAC/D1D,EAAAA,EAAAA,KAAA,UAAQ1F,GAAG,cAAaoJ,UACtB1D,EAAAA,EAAAA,KAAA,gBACE+E,KAAK,eACLC,cAAc,OACdC,WAAW,IACXC,YAAY,cAEhBJ,EAAAA,EAAAA,MAAA,QAAApB,SAAA,EACAoB,EAAAA,EAAAA,MAAA,kBAAgBxK,GAAG,UAAUyH,GAAG,MAAMC,GAAG,OAAOC,GAAG,MAAMC,GAAG,KAAIwB,SAAA,EAC9D1D,EAAAA,EAAAA,KAAA,QAAMmF,OAAO,MAAMC,UAAWpM,EAAUqM,YAAa,MACrDrF,EAAAA,EAAAA,KAAA,QAAMmF,OAAO,MAAMC,UAAWpM,EAAUqM,YAAa,SAEvDP,EAAAA,EAAAA,MAAA,kBAAgBxK,GAAG,UAAUyH,GAAG,MAAMC,GAAG,OAAOC,GAAG,MAAMC,GAAG,KAAIwB,SAAA,EAC9D1D,EAAAA,EAAAA,KAAA,QAAMmF,OAAO,MAAMC,UAAWnM,EAAaoM,YAAa,MACxDrF,EAAAA,EAAAA,KAAA,QAAMmF,OAAO,MAAMC,UAAWnM,EAAaoM,YAAa,WAIzDlG,GAAamD,EACbD,EACApD,GAAagE,GACdjD,EAAAA,EAAAA,KAAA,KAAGgB,KAAK,QAAQF,OAAO,eAAesB,YAAY,MAAKsB,SACpDjD,OAIL,OAAOT,EAAAA,EAAAA,KAAA,OAAKoE,UAAU,uCAAuCC,MAAO,CAAEiB,WAAY1M,EAAiB2M,cAAepK,EAAW,SAAW,OAAOuI,UAC7I1D,EAAAA,EAAAA,KAAA,OAAKoE,UAAU,8BAA6BV,UAC1CoB,EAAAA,EAAAA,MAAA,OAAKxF,IAAKA,EAAK8E,UAAU,6CAA4CV,SAAA,CAClEmB,EACAZ,EACAhF,IACDe,EAAAA,EAAAA,KAACwF,EAAAA,EAAU,CAAC5I,KAAMA,EAAM6I,cAAe/F,EAASvE,SAAUA,EAAUuK,QAASA,CAACzL,EAAGC,IAAM2F,EAAK1D,YAAYlC,EAAGC,GAAIyL,QAASnJ,GAAOkE,KAAqBb,EAAKlE,SAASkE,EAAKxE,WAAWJ,SAASrB,MAAO4C,IAAM,WAMhN,C,wECxjBA,SAASoJ,IACP,IAAKC,EAAYC,IAAiBrG,EAAAA,EAAAA,UAAS,IACtCtE,EAAU4K,IAAetG,EAAAA,EAAAA,WAAS,IAClCR,EAAW+G,IAAgBvG,EAAAA,EAAAA,WAAS,IACpCN,EAAW8G,IAAgBxG,EAAAA,EAAAA,WAAS,IACpCP,EAAiBgH,IAAsBzG,EAAAA,EAAAA,WAAS,IAChDL,EAAa+G,IAAkB1G,EAAAA,EAAAA,WAAS,GAE7C,OAAOqF,EAAAA,EAAAA,MAACsB,EAAAA,EAAQ,CAAChC,UAAU,gBAAeV,SAAA,EACxC1D,EAAAA,EAAAA,KAACqG,EAAAA,EAAa,CAAChJ,KAAM,GAAI+G,UAAU,kBAAiBV,UAClD1D,EAAAA,EAAAA,KAACjB,EAAQ,CAAC1E,MAAOwL,EAAY1K,SAAUA,EAAU8D,UAAWA,EAAWE,UAAWA,EAAWD,gBAAiBA,EAAiBE,YAAaA,OAE9IY,EAAAA,EAAAA,KAACqG,EAAAA,EAAa,CAAChJ,KAAM,GAAI+G,UAAU,GAAEV,UACnCoB,EAAAA,EAAAA,MAAA,OAAKV,UAAU,oCAAmCV,SAAA,EAChDoB,EAAAA,EAAAA,MAAA,MAAIV,UAAU,qCAAoCV,SAAA,CAAC,SAAOzE,EAAY,UAAY,WAElF6F,EAAAA,EAAAA,MAAA,KAAApB,SAAA,CAAG,iDAC4C1D,EAAAA,EAAAA,KAAA,KAAGsG,OAAO,SAASC,IAAI,sBAAsBnC,UAAU,4CAA4CoC,KAAK,qOAAoO9C,SAAC,mBAAkB,QAG9YoB,EAAAA,EAAAA,MAAA,KAAApB,SAAA,CAAG,cACOoB,EAAAA,EAAAA,MAAA,QAAMT,MAAO,CAAC1D,MAAO9H,GAAY6K,SAAA,EAAC1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,MAAM,oBAAqB,SAAKoB,EAAAA,EAAAA,MAAA,QAAMT,MAAO,CAAC1D,MAAO7H,GAAa4K,SAAA,EAAC1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,MAAM,qBAAsB,qDAAiD1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,gBAAe,mCAA+B1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,MAAM,QAGhQoB,EAAAA,EAAAA,MAAA,KAAApB,SAAA,CAAG,4EACuE1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,UAAU,oCAAgC1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,MAAM,qBAWlIoB,EAAAA,EAAAA,MAAA,OAAKV,UAAU,UAASV,SAAA,EACtBoB,EAAAA,EAAAA,MAAA,SAAOV,UAAU,uBAAuBqC,QAAQ,aAAY/C,SAAA,CAAC,UAAM1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,MAAM,QAG7E1D,EAAAA,EAAAA,KAAC0G,EAAAA,EAAW,CAACtC,UAAU,SAASuC,KAAK,aAAaC,MAAOf,EAAYgB,cAAgBC,IACnF,IAAIC,EAAMD,EAAEF,MACRG,IAAQC,MAAMD,IAChBjB,EAAciB,EAChB,EACCE,KAAK,UAAUC,aAAW,EAACzO,IAAK,EAAGC,IAAK,QAE7CoM,EAAAA,EAAAA,MAAA,OAAKV,UAAU,UAASV,SAAA,EACtB1D,EAAAA,EAAAA,KAAA,SAAOoE,UAAU,uBAAuBqC,QAAQ,WAAU/C,SAAC,uBAE3D1D,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CAAC/C,UAAU,SAASwC,MAAOzL,EAAW,WAAa,aAAciM,SAAWN,GAAWf,EAAuB,YAAXe,EAAEF,OAAsBS,QAAS,CAAC,WAAY,oBAIhKvC,EAAAA,EAAAA,MAAA,KAAApB,SAAA,CAAG,6DACsD1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,kBAAgB,cAAUoB,EAAAA,EAAAA,MAAA,QAAMT,MAAO,CAAC1D,MAAO9H,GAAY6K,SAAA,EAAC1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,MAAM,kBAAmB,YAAQoB,EAAAA,EAAAA,MAAA,QAAMT,MAAO,CAAC1D,MAAO7H,GAAa4K,SAAA,EAAC1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,MAAM,mBAAoB,yDAI/NoB,EAAAA,EAAAA,MAAA,OAAKV,UAAU,UAASV,SAAA,EACtB1D,EAAAA,EAAAA,KAAA,SAAOoE,UAAU,uBAAuBqC,QAAQ,WAAU/C,SAAC,kBAC3D1D,EAAAA,EAAAA,KAACsH,EAAAA,EAAW,CAACC,QAAStI,EAAWmI,SAAWN,GAAMd,EAAac,EAAEF,YAGlE3H,IACD6F,EAAAA,EAAAA,MAAA7E,EAAAA,SAAA,CAAAyD,SAAA,EAAEoB,EAAAA,EAAAA,MAAA,KAAApB,SAAA,CAAG,oCAC2B1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAE,aAAgB,4CAAwC1D,EAAAA,EAAAA,KAACuE,EAAAA,GAAE,CAAAb,SAAC,SAAQ,QAG3GoB,EAAAA,EAAAA,MAAA,OAAKV,UAAU,UAASV,SAAA,EACtB1D,EAAAA,EAAAA,KAAA,SAAOoE,UAAU,uBAAuBqC,QAAQ,WAAU/C,SAAC,oBAE3D1D,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CAAC/C,UAAU,SAASwC,MAAO1H,EAAkB,YAAc,WAAYkI,SAAWN,GAAWZ,EAA8B,aAAXY,EAAEF,OAAuBS,QAAS,CAAC,YAAa,kBAI/KvC,EAAAA,EAAAA,MAAA,OAAKV,UAAU,UAASV,SAAA,EACtB1D,EAAAA,EAAAA,KAAA,SAAOoE,UAAU,uBAAuBqC,QAAQ,WAAU/C,SAAC,YAE3D1D,EAAAA,EAAAA,KAACmH,EAAAA,EAAY,CAAC/C,UAAU,SAASwC,MAAOxH,EAAc,SAAW,SAAUgI,SAAWN,GAAWX,EAA0B,UAAXW,EAAEF,OAAoBS,QAAS,CAAC,SAAU,yBAUlK,CAEA,MAAM/J,EAAOkK,EAAAA,WAAoBC,SAASC,eAAe,UAEzDC,EAAAA,EAAAA,KACArK,EAAKsK,QACH5H,EAAAA,EAAAA,KAAC6H,EAAAA,WAAgB,CAAAnE,UACb1D,EAAAA,EAAAA,KAAC8H,EAAAA,GAAkB,CAAApE,UAEjB1D,EAAAA,EAAAA,KAAA,OAAKoE,UAAU,0CAAyCV,UACtD1D,EAAAA,EAAAA,KAAC4F,EAAI,U,GCpHXmC,EAA2B,CAAC,EAGhC,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBnK,IAAjBoK,EACH,OAAOA,EAAaC,QAGrB,IAAIC,EAASL,EAAyBE,GAAY,CAGjDE,QAAS,CAAC,GAOX,OAHAE,EAAoBJ,GAAUG,EAAQA,EAAOD,QAASH,GAG/CI,EAAOD,OACf,CAGAH,EAAoBM,EAAID,ELzBpB3Q,EAAW,GACfsQ,EAAoBO,EAAI,CAACrM,EAAQsM,EAAUC,EAAIC,KAC9C,IAAGF,EAAH,CAMA,IAAIG,EAAeC,IACnB,IAAS1Q,EAAI,EAAGA,EAAIR,EAASO,OAAQC,IAAK,CAGzC,IAFA,IAAKsQ,EAAUC,EAAIC,GAAYhR,EAASQ,GACpC2Q,GAAY,EACPC,EAAI,EAAGA,EAAIN,EAASvQ,OAAQ6Q,MACpB,EAAXJ,GAAsBC,GAAgBD,IAAaK,OAAO3L,KAAK4K,EAAoBO,GAAGS,OAAOC,GAASjB,EAAoBO,EAAEU,GAAKT,EAASM,MAC9IN,EAASU,OAAOJ,IAAK,IAErBD,GAAY,EACTH,EAAWC,IAAcA,EAAeD,IAG7C,GAAGG,EAAW,CACbnR,EAASwR,OAAOhR,IAAK,GACrB,IAAI6I,EAAI0H,SACE3K,IAANiD,IAAiB7E,EAAS6E,EAC/B,CACD,CACA,OAAO7E,CAnBP,CAJCwM,EAAWA,GAAY,EACvB,IAAI,IAAIxQ,EAAIR,EAASO,OAAQC,EAAI,GAAKR,EAASQ,EAAI,GAAG,GAAKwQ,EAAUxQ,IAAKR,EAASQ,GAAKR,EAASQ,EAAI,GACrGR,EAASQ,GAAK,CAACsQ,EAAUC,EAAIC,EAqBjB,EMzBdV,EAAoBmB,EAAI,CAAChB,EAASiB,KACjC,IAAI,IAAIH,KAAOG,EACXpB,EAAoBqB,EAAED,EAAYH,KAASjB,EAAoBqB,EAAElB,EAASc,IAC5EF,OAAOO,eAAenB,EAASc,EAAK,CAAEM,YAAY,EAAMC,IAAKJ,EAAWH,IAE1E,ECNDjB,EAAoBqB,EAAI,CAACI,EAAKC,IAAUX,OAAOY,UAAUC,eAAeC,KAAKJ,EAAKC,GCAlF1B,EAAoBc,EAAI,I,MCKxB,IAAIgB,EAAkB,CACrB,IAAK,GAaN9B,EAAoBO,EAAEO,EAAKiB,GAA0C,IAA7BD,EAAgBC,GAGxD,IAAIC,EAAuB,CAACC,EAA4BC,KACvD,IAGIjC,EAAU8B,GAHTvB,EAAU2B,EAAaC,GAAWF,EAGhBhS,EAAI,EAC3B,GAAGsQ,EAAS6B,MAAM/P,GAAgC,IAAxBwP,EAAgBxP,KAAa,CACtD,IAAI2N,KAAYkC,EACZnC,EAAoBqB,EAAEc,EAAalC,KACrCD,EAAoBM,EAAEL,GAAYkC,EAAYlC,IAGhD,GAAGmC,EAAS,IAAIlO,EAASkO,EAAQpC,EAClC,CAEA,IADGiC,GAA4BA,EAA2BC,GACrDhS,EAAIsQ,EAASvQ,OAAQC,IACzB6R,EAAUvB,EAAStQ,GAChB8P,EAAoBqB,EAAES,EAAiBC,IAAYD,EAAgBC,IACrED,EAAgBC,GAAS,KAE1BD,EAAgBC,GAAW,EAE5B,OAAO/B,EAAoBO,EAAErM,EAAO,EAGjCoO,EAAqBC,KAA4C,sCAAIA,KAA4C,uCAAK,GAC1HD,EAAmBE,QAAQR,EAAqBS,KAAK,KAAM,IAC3DH,EAAmB5M,KAAOsM,EAAqBS,KAAK,KAAMH,EAAmB5M,KAAK+M,KAAKH,G,KC7CvF,IAAII,EAAsB1C,EAAoBO,OAAEzK,EAAW,CAAC,IAAI,IAAI,KAAK,IAAOkK,EAAoB,QACpG0C,EAAsB1C,EAAoBO,EAAEmC,E","sources":["webpack://react-ts-tailwind-starter/webpack/runtime/chunk loaded","webpack://react-ts-tailwind-starter/./src/common/Permutation.tsx","webpack://react-ts-tailwind-starter/./src/common/Colors.tsx","webpack://react-ts-tailwind-starter/./src/route-benes/BenesNet.tsx","webpack://react-ts-tailwind-starter/./src/route-benes/page.tsx","webpack://react-ts-tailwind-starter/webpack/bootstrap","webpack://react-ts-tailwind-starter/webpack/runtime/define property getters","webpack://react-ts-tailwind-starter/webpack/runtime/hasOwnProperty shorthand","webpack://react-ts-tailwind-starter/webpack/runtime/runtimeId","webpack://react-ts-tailwind-starter/webpack/runtime/jsonp chunk loading","webpack://react-ts-tailwind-starter/webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = (result, chunkIds, fn, priority) => {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar [chunkIds, fn, priority] = deferred[i];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","export default class Permutation {\n  constructor(lut: number[]) {\n    this.lut = [...lut];\n\n    // Compute the inverse.\n    this.invLut = Array<number>(lut.length)\n    for (let i = 0; i < lut.length; i++) {\n      this.invLut[lut[i]] = i;\n    }\n  }\n\n  invert() {\n    let swap = this.invLut;\n    this.invLut = this.lut;\n    this.lut = swap;\n  }\n\n  lut: number[];\n  invLut: number[];\n}\n\nexport function correctIdx(rawIdx: number, height: number) {\n  return Math.min(height - 1, Math.max(0, Math.round(rawIdx)));\n}\n\nfunction allPerms_recurse(unusedNums: Set<number>, lut: number[], n: number, perms: Permutation[]) {\n  if (lut.length === n) {\n    perms.push(new Permutation(lut));\n    return;\n  }\n\n  let unusedList = Array.from(unusedNums).toSorted();\n\n  for (let unusedNum of unusedList) {\n    lut.push(unusedNum);\n    unusedNums.delete(unusedNum);\n    allPerms_recurse(unusedNums, lut, n, perms);\n    unusedNums.add(unusedNum);\n    lut.pop();\n  }\n}\n\nexport function allPerms(n: number) {\n  let unusedNums = new Set<number>();\n\n  for (let i = 0; i < n; i++) {\n    unusedNums.add(i);\n  }\n\n  let result: Permutation[] = [];\n\n  allPerms_recurse(unusedNums, [], n, result);\n\n  return result;\n}\n","import * as d3 from \"d3\";\n\n// Based on https://github.com/vv9k/vim-github-dark\nexport let backgroundColor = \"#161b22\";\nexport let inputColor = \"#faa356\";\nexport let outputColor = \"#a2d2fb\";\nexport let midColor = \"#ecf2f8\";\nexport let topColor = \"#7ce38b\";\nexport let bottomColor = \"#cea5fb\";\n\n// https://observablehq.com/@harrystevens/roll-your-own-color-palette-interpolator\nfunction interpolatePalette(palette : string[]) {\n  return (t: number) => d3.piecewise(d3.interpolateLab, palette)(Math.min(Math.max(0, t), 1));\n}\n\nexport function getColorScale(resolution: number) {\n  return d3.scaleSequential().domain([0,resolution]).interpolator(interpolatePalette([\"#fa7970\", \"#ecf2f8\", \"#faa356\", \"#7ce38b\", \"#a2d2fb\", \"#77bdfb\", \"#cea5fb\"]));\n}","import { useEffect, useLayoutEffect,useRef, useState } from \"react\";\n\nimport useResizeObserver from \"@react-hook/resize-observer\";\nimport * as d3 from \"d3\";\n\nimport { backgroundColor, bottomColor, getColorScale, inputColor, midColor, outputColor, topColor } from \"../common/Colors\";\nimport { KI } from \"../common/katex\";\nimport Permutation, { correctIdx } from \"../common/Permutation\";\nimport PermWidget, { Vec2 } from \"@/common/PermWidget\";\n\nclass Box {\n  constructor(left: number, top: number, right: number, bottom: number) {\n    this.top = top;\n    this.bottom = bottom;\n    this.left = left;\n    this.right = right;\n  }\n\n  pad(amount: number) {\n    this.left -= amount;\n    this.top -= amount;\n    this.right += amount;\n    this.bottom += amount;\n  }\n\n  scale(x: d3.ScaleLinear<number, number>, y:d3.ScaleLinear<number, number>) {\n    this.right = x(this.right);\n    this.left = x(this.left);\n    this.top = y(this.top);\n    this.bottom = y(this.bottom);\n  }\n\n  width() {\n    return this.right - this.left;\n  }\n\n  height() {\n    return this.bottom - this.top;\n  }\n\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n}\n\n\n\nclass Subnet {\n  constructor(order: number, left: number, top: number, id: string) {\n    this.order = order;\n    this.width = 2*order;\n    this.height = 2**order;\n    this.left = left;\n    this.top = top;\n    this.id = id;\n  }\n\n  isInput(localX: number) {\n    return localX == 0;\n  }\n\n  isOutput(localX: number) {\n    return localX == this.width - 1;\n  }\n\n  isSubOutput(localX: number) {\n    return localX >= this.width/2;\n  }\n\n  isTerminal(localX: number) {\n    return this.isOutput(localX) || this.isInput(localX);\n  }\n\n  globalX(localX: number) {\n    return this.left + localX;\n  }\n\n  globalY(localY: number) {\n    return this.top + localY;\n  }\n\n  topSubnet() {\n    let result = new Subnet(this.order - 1, this.globalX(1), this.globalY(0), this.id+\"0\");\n    return result;\n  }\n\n  bottomSubnet() {\n    let result = new Subnet(this.order - 1, this.globalX(1), this.globalY(this.height/2), this.id+\"1\");\n    return result;\n  }\n\n  extent() {\n    return new Box(this.globalX(0), this.globalY(0), this.globalX(this.width - 1), this.globalY(this.height - 1));\n  }\n\n  id: string;\n\n  order: number;\n\n  width: number;\n  height: number;\n\n  top: number;\n  left: number;\n}\n\nclass Grid {\n  constructor(order: number, vertical: boolean, screenBox: Box) {\n    this.rootSubnet = new Subnet(order, 0, 0, \"\");\n    let extent = this.rootSubnet.extent();\n\n    this.vertical = vertical;\n\n    let [xExtent, yExtent] = this.verticalitySwap([extent.left, extent.right], [extent.top, extent.bottom]);\n    this.xScale = d3.scaleLinear(xExtent, [screenBox.left, screenBox.right]);\n    this.yScale = d3.scaleLinear(yExtent, [screenBox.top, screenBox.bottom]);\n  }\n\n  verticalitySwap<T>(x: T, y: T): [T, T] {\n    if (this.vertical) {\n      return [y, x];\n    } else {\n      return [x, y];\n    }\n  }\n\n  toScreen(gridX: number, gridY: number): Vec2 {\n    let [swappedX, swappedY] = this.verticalitySwap(gridX, gridY);\n    return [this.xScale(swappedX), this.yScale(swappedY)];\n  }\n\n  toScreenBox(box: Box): Box {\n    let result = new Box(0,0,0,0);\n    [result.left, result.top] = this.toScreen(box.left, box.top);\n    [result.right, result.bottom] = this.toScreen(box.right, box.bottom);\n    return result;\n  }\n\n  yFromScreen(screenX: number, screenY: number) {\n    let result = this.vertical ? this.xScale.invert(screenX) : this.yScale.invert(screenY);\n    result = correctIdx(result, this.rootSubnet.height)\n    return result;\n  }\n\n  rootSubnet: Subnet;\n  vertical: boolean;\n  xScale: d3.ScaleLinear<number, number>;\n  yScale: d3.ScaleLinear<number, number>;\n}\nfunction benesTwin(k: number, idx: number) {\n  let modulus = 2 ** (k-1);\n  let result = idx;\n  if (idx >= modulus) {\n    result -= modulus;\n  } else {\n    result += modulus;\n  }\n  return result;\n}\n\nenum EdgeColor {\n  Top = 0,\n  Bottom = 1,\n  None = 2\n}\n\ntype BenesPath = {\n  edgeColors: EdgeColor[],\n  // Vertex indices (not coords!) as indexed from the whole net.\n  verts: number[]\n}\n\nfunction routePermutation(k: number, perm: Permutation): BenesPath[] {\n  // Bottom case.\n  if (k === 1) {\n    if (perm.lut[0] === 0) {\n      // Identity permutation.\n      return [{edgeColors: [EdgeColor.None], verts: [0, 0]}, {edgeColors: [EdgeColor.None], verts: [1, 1]}];\n    } else {\n      // (1 2)\n      return [{edgeColors: [EdgeColor.None], verts: [0, 1]}, {edgeColors: [EdgeColor.None], verts: [1, 0]}];\n    }\n  }\n\n  // Generic case.\n\n  let netHeight = 2 ** k;\n\n  let paths: BenesPath[] = Array(netHeight);\n\n  let unexplored = new Set(Array(netHeight).keys());\n\n  // Color in the vertices. Each loop iteration corresponds to a component\n  // of the routing graph.\n  while (unexplored.size > 0) {\n    // Pop any element from the set. Apparently the APIs don't allow \n    // for this without a for loop.\n    let root: number = -1;\n    for (let el of unexplored) {\n      root = el;\n      break;\n    }\n    if (root < 0) {\n      // Done.\n      break;\n    }\n\n    // Do a BFS starting from the root.\n    let queue: number[] = [];\n    unexplored.delete(root);\n    queue.push(root);\n    paths[root] = {\n      edgeColors: [EdgeColor.Top],\n      verts: [root]\n    };\n    for (;;) {\n      let atVert = queue.shift();\n      if (atVert === undefined) {\n        break;\n      }\n\n      let atColor = paths[atVert].edgeColors[0];\n      let neighborColor = 1-atColor;\n\n      let inputNeighbor = benesTwin(k, atVert);\n      let outputNeighbor = perm.invLut[benesTwin(k, perm.lut[atVert])];\n\n      for (let neighbor of [inputNeighbor, outputNeighbor]) {\n        if (unexplored.has(neighbor)) {\n          unexplored.delete(neighbor);\n          paths[neighbor] = {\n            edgeColors: [neighborColor],\n            verts: [neighbor]\n          };\n          queue.push(neighbor);\n        }\n      }\n    }\n  }\n\n  let luts = [Array(netHeight/2), Array(netHeight/2)];\n  for (let inputIdx = 0; inputIdx < netHeight; inputIdx++) {\n    let subInputIdx = inputIdx % (netHeight/2);\n    luts[paths[inputIdx].edgeColors[0]][subInputIdx] = perm.lut[inputIdx] % (netHeight/2);\n  }\n\n  let subRoutings = luts.map(lut => routePermutation(k-1, new Permutation(lut)));\n\n  for (let globalIdx = 0; globalIdx < netHeight; globalIdx++) {\n    let subInputIdx = globalIdx % (netHeight/2);\n    let globalPath = paths[globalIdx];\n    let edgeColor = globalPath.edgeColors[0];\n    let idxShift = edgeColor*netHeight/2;\n\n    globalPath.edgeColors.push(...subRoutings[edgeColor][subInputIdx].edgeColors);\n    globalPath.verts.push(...subRoutings[edgeColor][subInputIdx].verts.map(v => v + idxShift));\n  }\n\n  // Add the final edges.\n  for (let inputIdx = 0; inputIdx < netHeight; inputIdx++) {\n    let path = paths[inputIdx];\n    path.edgeColors.push(path.edgeColors[0]);\n    path.verts.push(perm.lut[inputIdx]);\n  }\n\n  return paths;\n}\n\nfunction DraggableCircle(props: {onDrag: Function | undefined, onDragStart: Function | undefined, onDragEnd: Function | undefined} & React.SVGProps<SVGCircleElement>) {\n  let ref = useRef(null);\n\n  useEffect(() => {\n    if (ref.current) {\n      let drag = d3.drag();\n      if (props.onDrag) {\n        drag = drag.on(\"drag\", props.onDrag);\n      }\n      if (props.onDragStart) {\n        drag = drag.on(\"start\", props.onDragStart);\n      }\n      if (props.onDragEnd) {\n        drag = drag.on(\"end\", props.onDragEnd);\n      }\n\n      drag(d3.select(ref.current));\n    }\n  });\n\n  return <circle ref={ref} {...props} />\n}\n\nexport default function BenesNet({\n  order,\n  vertical = true,\n  doRouting = true,\n  bipartiteColors = false,\n  drawBoxes = true,\n  dottedLines = false\n} : {order: number, vertical?: boolean, doRouting?: boolean, drawBoxes?: boolean, bipartiteColors?: boolean, dottedLines?: boolean})\n{\n  let numInputs = 2**order;\n  let ref = useRef<HTMLDivElement>(null);\n  let [size, setSize] = useState<DOMRect|undefined>();\n  let [perm, setPerm] = useState(new Permutation([...Array(numInputs).keys()]));\n\n\n  let marginTop = 50,\n  marginRight = 50,\n  marginBottom = 50,\n  marginLeft = 50;\n\n  if (doRouting) {\n    if (vertical) {\n      marginBottom += 50;\n    } else {\n      marginRight += 50;\n    }\n  }\n  let width = size?.width || 0;\n  let height = size?.height || 0;\n  let screenBox = new Box(marginLeft, marginTop, width - marginRight, height - marginBottom);\n  let grid = new Grid(order, vertical, screenBox);\n\n\n  let [prevK, setPrevK] = useState(order);\n  if (prevK != order) {\n    setPrevK(order);\n    setPerm(new Permutation([...Array(numInputs).keys()]));\n    return <></>;\n  }\n\n\n  useLayoutEffect(() => {\n    setSize(ref.current?.getBoundingClientRect());\n  }, [ref]);\n\n  if (typeof window !== \"undefined\") {\n    useResizeObserver(ref, entry => setSize(entry.contentRect));\n  }\n\n  let circles: any[] = [];\n\n  // Connecting the lines to the center of the circle makes them hard to follow,\n  // so we offset the input and output circles by a small terminal bias.\n  function applyTerminalBias(screenX: number, screenY: number, isInput: boolean) {\n    let [x, y] = grid.verticalitySwap(screenX, screenY);\n    x += isInput ? -13 : 13;\n    return grid.verticalitySwap(x, y);\n  }\n\n\n  // Draw grid circles.\n  for (let gridX = 0; gridX < grid.rootSubnet.width; gridX++) {\n    let isInput = grid.rootSubnet.isInput(gridX);\n    let isTerminal = grid.rootSubnet.isTerminal(gridX);\n\n    let color = grid.rootSubnet.isSubOutput(gridX) ? outputColor : inputColor;\n    for (let gridY = 0; gridY < grid.rootSubnet.height; gridY++) {\n      let [screenX, screenY] = grid.toScreen(gridX, gridY);\n\n      if (isTerminal) {\n        [screenX, screenY] = applyTerminalBias(screenX, screenY, isInput);\n      }\n\n\n      circles.push(<circle\n        key={gridX + ',' + gridY}\n        cx={screenX} cy={screenY}\n        stroke=\"none\"\n        r={isTerminal ? 15 : 8} fill={color}  />)\n    }\n  }\n\n  function connectButterfly(lines: any[], prefix: string, extent: Box, topColor: string, bottomColor: string, isRight: boolean) {\n    let colTop, colBot, colFall, colRise = \"\";\n    if (isRight) {\n      colTop = colFall = topColor;\n      colBot = colRise = bottomColor;\n    } else {\n      colTop = colRise = topColor;\n      colBot = colFall = bottomColor;\n    }\n\n    function putLine(postfix: string, fromX: number, fromY: number, toX: number, toY: number, stroke: string) {\n      let [x1, y1] = grid.toScreen(fromX, fromY), [x2, y2] = grid.toScreen(toX, toY);\n      lines.push(<line key={prefix+postfix} {...{ x1, y1, x2, y2 }} strokeOpacity={0.5} stroke={stroke} strokeWidth={2} />);\n    }\n\n    // Top line.\n    putLine(\"t\", extent.left, extent.top, extent.right, extent.top, colTop);\n    // Bottom line.\n    putLine(\"b\", extent.left, extent.bottom, extent.right, extent.bottom, colBot);\n    // Falling line.\n    putLine(\"f\", extent.left, extent.top, extent.right, extent.bottom, colFall);\n    // Rising line.\n    putLine(\"r\", extent.left, extent.bottom, extent.right, extent.top, colRise);\n  }\n\n  function connectBenes(benesLines: any[], benesRects: any[], subnet: Subnet) {\n    if (subnet.order === 1) {\n      connectButterfly(benesLines, subnet.id+\"but\", subnet.extent(), midColor, midColor, false);\n    } else {\n      let topSubnet = subnet.topSubnet();\n      let bottomSubnet = subnet.bottomSubnet();\n\n      // TODO: Scale this adaptively.\n      let padAmount = 20;\n\n      let topBox = grid.toScreenBox(topSubnet.extent());\n      let bottomBox = grid.toScreenBox(bottomSubnet.extent());\n\n      topBox.pad(padAmount);\n      bottomBox.pad(padAmount);\n\n      //benesRects.push(<rect key={\"ar\"+topSubnet.id} rx={10} ry={10} x={topBox.left} y={topBox.top} width={topBox.right - topBox.left} height={topBox.bottom - topBox.top} stroke={\"none\"} fill={backgroundColor} fillOpacity={0.8} />)\n      //benesRects.push(<rect key={\"ar\"+bottomSubnet.id} rx={10} ry={10} x={bottomBox.left} y={bottomBox.top} width={bottomBox.right - bottomBox.left} height={bottomBox.bottom - bottomBox.top} stroke={\"none\"} fill={backgroundColor} fillOpacity={0.8} />)\n\n      benesRects.push(<rect key={\"br\"+topSubnet.id} rx={10} ry={10} x={topBox.left} y={topBox.top} width={topBox.right - topBox.left} height={topBox.bottom - topBox.top} stroke={\"none\"} fill={\"url('#topGrad')\"} fillOpacity={0.2} />)\n      benesRects.push(<rect key={\"br\"+bottomSubnet.id} rx={10} ry={10} x={bottomBox.left} y={bottomBox.top} width={bottomBox.right - bottomBox.left} height={bottomBox.bottom - bottomBox.top} stroke={\"none\"} fill={\"url('#botGrad')\"} fillOpacity={0.2} />)\n\n      // Top subnet.\n      connectBenes(benesLines, benesRects, topSubnet);\n      // Bottom subnet.\n      connectBenes(benesLines, benesRects, bottomSubnet);\n\n      // Draw the butterflies.\n\n      for (let subLocalY = 0; subLocalY < topSubnet.height; subLocalY++) {\n        // Both butterflies have the same vertical extents.\n        let butterfly = new Box(0, 0, 0, 0);\n        butterfly.top = topSubnet.globalY(subLocalY);\n        butterfly.bottom = bottomSubnet.globalY(subLocalY);\n\n        // Left butterfly\n        butterfly.left = subnet.extent().left;\n        butterfly.right = topSubnet.extent().left;\n        connectButterfly(benesLines, subnet.id+\"_butt_\"+subLocalY+\"_\", butterfly, topColor, bottomColor, false);\n\n        // Right butterfly\n        butterfly.right = subnet.extent().right;\n        butterfly.left = topSubnet.extent().right;\n        connectButterfly(benesLines, subnet.id+\"_butb_\"+subLocalY+\"_\", butterfly, topColor, bottomColor, true);\n      }\n    }\n  }\n\n\n  let benesLines: any[] = [];\n  let benesRects: any[] = [];\n  connectBenes(benesLines, benesRects, grid.rootSubnet);\n  \n  function drawRouting(routingLines: any[], routing: BenesPath[], k: number) {\n    let netHeight = 2 ** k;\n    var colorScale = getColorScale(netHeight-1);\n  \n    for (let inputIdx = 0; inputIdx < netHeight; inputIdx++) {\n      let pathColor = colorScale(inputIdx);\n\n      let path = routing[inputIdx];\n\n      for (let edgeIdx = 0; edgeIdx < path.edgeColors.length; edgeIdx++) {\n        let [x1, y1] = grid.toScreen(edgeIdx, path.verts[edgeIdx]);\n        let [x2, y2] = grid.toScreen(edgeIdx+1, path.verts[edgeIdx+1]);\n\n        let edgeColor = path.edgeColors[edgeIdx];\n        let lineColor = midColor;\n        if (!bipartiteColors) {\n          lineColor = pathColor.toString();\n        } else if (edgeColor === EdgeColor.Top) {\n          lineColor = topColor;\n        } else if (edgeColor === EdgeColor.Bottom) {\n          lineColor = bottomColor;\n        }\n\n        routingLines.push(<line\n          stroke-linecap=\"round\"\n          key={`rt_${inputIdx}_${edgeIdx}`}\n          x1={x1} y1={y1} x2={x2} y2={y2}\n          fill=\"none\"\n          strokeWidth=\"6\"\n          strokeDasharray={dottedLines ? \"10,30\" : \"\"}\n          stroke={lineColor}\n        >\n          {dottedLines &&\n            <animate\n              attributeName=\"stroke-dashoffset\"\n              values=\"40;0\"\n              dur=\"3s\"\n              calcMode=\"linear\"\n              repeatCount=\"indefinite\" />\n          }\n        </line>);\n      }\n    }\n  }\n\n\n  let routing = routePermutation(order, perm);\n\n  let routingLines: any[] = [];\n  drawRouting(routingLines, routing, order);\n\n  function drawInputLabels(inputLabels: any[]) {\n    for (let inputIdx = 0; inputIdx < grid.rootSubnet.height; inputIdx++) {\n      let [x, y] = applyTerminalBias(...grid.toScreen(0, inputIdx), true);\n\n      inputLabels.push(\n        <div \n        className=\"absolute pointer-events-none bold\"\n        key={\"il_\" + inputIdx}\n        style={{\n          transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`,\n          color: backgroundColor\n        }}>\n          <KI>{`${inputIdx+1}`}</KI>\n        </div>);\n    }\n  }\n\n  function drawOutputLabels(outputLabels: any[]) {\n    for (let preimage = 0; preimage < grid.rootSubnet.height; preimage++) {\n      let outputIdx = perm.lut[preimage];\n      let [x, y] = applyTerminalBias(...grid.toScreen(grid.rootSubnet.extent().right, outputIdx), false);\n\n\n      outputLabels.push(\n        <div \n        key={\"ol_\" + preimage.toString()}\n        className=\"absolute pointer-events-none\" \n        style={{\n          transform: `translate(-50%, -50%) translate(${x}px, ${y}px)`,\n          color: backgroundColor\n        }}>\n          <KI>{`${outputIdx+1}`}</KI>\n        </div>);\n    }\n  }\n\n  let labels: any[] = [];\n  let prescriptions: any[] = [];\n  drawInputLabels(labels);\n  drawOutputLabels(labels);\n  if (doRouting) {\n    labels.push(...prescriptions);\n  }\n\n  let svg = <svg className=\"absolute\" width={width} height={height}>\n    <filter id='noiseFilter'>\n      <feTurbulence\n        type='fractalNoise'\n        baseFrequency='3.76'\n        numOctaves='3'\n        stitchTiles='stitch' />\n    </filter>\n    <defs>\n    <linearGradient id=\"topGrad\" x1=\"10%\" y1=\"100%\" x2=\"90%\" y2=\"0%\">\n      <stop offset=\"10%\" stopColor={topColor} stopOpacity={0.8} />\n      <stop offset=\"90%\" stopColor={topColor} stopOpacity={0.2} />\n    </linearGradient>\n    <linearGradient id=\"botGrad\" x1=\"10%\" y1=\"100%\" x2=\"90%\" y2=\"0%\">\n      <stop offset=\"10%\" stopColor={bottomColor} stopOpacity={0.8} />\n      <stop offset=\"90%\" stopColor={bottomColor} stopOpacity={0.2} />\n    </linearGradient>\n  </defs>\n\n    {drawBoxes && benesRects}\n    {benesLines}\n    {doRouting && routingLines}\n    <g fill=\"white\" stroke=\"currentColor\" strokeWidth=\"1.5\">\n      {circles}\n    </g>\n  </svg>;\n\n  return <div className=\"flex items-stretch w-full h-full p-1\" style={{ background: backgroundColor, flexDirection: vertical ? \"column\" : \"row\"}}>\n    <div className=\"flex grow items-stretch p-1\">\n      <div ref={ref} className=\"relative flex grow p-0 m-0 overflow-hidden\">\n        {svg}\n        {labels}\n        {doRouting &&\n        <PermWidget perm={perm} onPermChanged={setPerm} vertical={vertical} xyToIdx={(x, y) => grid.yFromScreen(x, y)} idxToXY={idx => applyTerminalBias(...grid.toScreen(grid.rootSubnet.extent().right, idx), false)} />\n        }\n        </div>\n    </div>\n  </div>\n    ;\n}","import React from 'react';\nimport ReactDOM from 'react-dom/client';\n\nimport '@/styles/index.css';\n\nimport { useState } from \"react\";\nimport BenesNet from \"./BenesNet\";\nimport NoSsr from \"../common/NoSsr\";\nimport { Splitter, SplitterPanel } from 'primereact/splitter';\nimport { InputNumber, InputNumberValueChangeEvent } from 'primereact/inputnumber';\nimport { PrimeReactProvider } from 'primereact/api';\nimport \"primereact/resources/themes/lara-dark-teal/theme.css\";\nimport \"primereact/resources/primereact.css\";\nimport { InputSwitch, InputSwitchChangeEvent } from \"primereact/inputswitch\";\nimport { SelectButton } from \"primereact/selectbutton\";\nimport { initMacros, KI } from \"../common/katex\";\nimport { inputColor, outputColor } from \"../common/Colors\";\n\nfunction Main() {\n  let [benesOrder, setBenesOrder] = useState(3);\n  let [vertical, setVertical] = useState(true);\n  let [doRouting, setDoRouting] = useState(false);\n  let [drawBoxes, setDrawBoxes] = useState(true);\n  let [bipartiteColors, setBipartiteColors] = useState(false);\n  let [dottedLines, setDottedLines] = useState(false);\n\n  return <Splitter className=\"h-full w-full\">\n    <SplitterPanel size={75} className=\"overflow-hidden\">\n      <BenesNet order={benesOrder} vertical={vertical} doRouting={doRouting} drawBoxes={drawBoxes} bipartiteColors={bipartiteColors} dottedLines={dottedLines} />\n    </SplitterPanel>\n    <SplitterPanel size={25} className=\"\">\n      <div className=\"pl-7 pr-7 space-y-4 overflow-auto\">\n        <h1 className=\"text-xl font-bold my-4 font-italic\">Beneš {doRouting ? \"Routing\" : \"Nets\"}</h1>\n\n        <p>\n          This is an interactive demo of the so-called <a target=\"_blank\" rel=\"noopener noreferrer\" className=\"underline text-sky-300 hover:text-sky-200\" href=\"https://eng.libretexts.org/Bookshelves/Computer_Science/Programming_and_Computation_Fundamentals/Mathematics_for_Computer_Science_(Lehman_Leighton_and_Meyer)/02%3A_Structures/10%3A_Communication_Networks/10.09%3A_Benes_Network\">Beneš networks</a>.\n        </p>\n\n        <p>\n        They have <span style={{color: inputColor}}><KI>n</KI> \"input nodes\"</span> and <span style={{color: outputColor}}><KI>n</KI> \"output nodes\"</span> (indicated as big circles). In total, they have <KI>2 n \\log n</KI> nodes and a maximum degree of <KI>4</KI>.\n        </p>\n\n        <p>\n          They have a recursive structure, as indicated by the boxes. That is why <KI>n=2^k</KI> is a power of two. We refer to <KI>k</KI> as the order.\n        </p>\n\n        {/* Comment out the switch for drawing the boxes.*/ /*\n\n        <div className=\"text-sm\">\n          <label className=\"block mb-1 font-bold\" htmlFor=\"vertical\">Draw boxes:</label>\n          <InputSwitch checked={drawBoxes} onChange={(e) => setDrawBoxes(e.value)} />\n        </div>\n        */}\n        \n        <div className=\"text-sm\">\n          <label className=\"block mb-1 font-bold\" htmlFor=\"benesOrder\">Order <KI>k</KI>:</label>\n\n\n          <InputNumber className=\"w-full\" name=\"benesOrder\" value={benesOrder} onValueChange={(e: InputNumberValueChangeEvent) => {\n            let val = e.value;\n            if (val && !isNaN(val)) {\n              setBenesOrder(val)\n            }\n          }} mode=\"decimal\" showButtons min={1} max={6} />\n        </div>\n        <div className=\"text-sm\">\n          <label className=\"block mb-1 font-bold\" htmlFor=\"vertical\">Layout direction:</label>\n\n          <SelectButton className=\"w-full\" value={vertical ? \"Vertical\" : \"Horizontal\"} onChange={(e: any) => setVertical(e.value == \"Vertical\")} options={[\"Vertical\", \"Horizontal\"]} />\n        </div>\n\n\n        <p>\n        Beneš nets satisfy the following property: Any bijection <KI>\\pi \\in S_n</KI> from its <span style={{color: inputColor}}><KI>n</KI> input nodes</span> to its <span style={{color: outputColor}}><KI>n</KI> output nodes</span> can be realized by vertex-disjoint paths.\n        Try it!\n        </p>\n\n        <div className=\"text-sm\">\n          <label className=\"block mb-1 font-bold\" htmlFor=\"vertical\">Show routes:</label>\n          <InputSwitch checked={doRouting} onChange={(e) => setDoRouting(e.value)} />\n        </div>\n\n        {doRouting &&\n        <><p>\n        Click on any prescription arrow <KI>{\"\\\\mapsto\"}</KI> and drag it to configure the bijection <KI>\\pi</KI>.\n      </p>\n\n      <div className=\"text-sm\">\n        <label className=\"block mb-1 font-bold\" htmlFor=\"vertical\">Path coloring:</label>\n\n        <SelectButton className=\"w-full\" value={bipartiteColors ? \"Bipartite\" : \"Pathwise\"} onChange={(e: any) => setBipartiteColors(e.value == \"Bipartite\")} options={[\"Bipartite\", \"Pathwise\"]} />\n      </div>\n\n      \n      <div className=\"text-sm\">\n        <label className=\"block mb-1 font-bold\" htmlFor=\"vertical\">Lines:</label>\n\n        <SelectButton className=\"w-full\" value={dottedLines ? \"Dotted\" : \"Simple\"} onChange={(e: any) => setDottedLines(e.value == \"Dotted\")} options={[\"Simple\", \"Dotted\"]} />\n      </div>\n        </>\n\n        }\n\n      \n      </div>\n    </SplitterPanel>\n  </Splitter>;\n}\n\nconst root = ReactDOM.createRoot(document.getElementById('root')!);\n\ninitMacros();\nroot.render(\n  <React.StrictMode>\n      <PrimeReactProvider>\n        {/* A fixed pos seems to be necessary to get rid of some strange scrollbars */}\n        <div className=\"fixed flex overflow-hidden h-dvh w-full\">\n          <Main />\n        </div>\n      </PrimeReactProvider>\n  </React.StrictMode>\n);\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","__webpack_require__.j = 222;","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t222: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = (parentChunkLoadingFunction, data) => {\n\tvar [chunkIds, moreModules, runtime] = data;\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some((id) => (installedChunks[id] !== 0))) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkreact_ts_tailwind_starter\"] = self[\"webpackChunkreact_ts_tailwind_starter\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [967,810,76], () => (__webpack_require__(5288)))\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","Permutation","constructor","lut","this","invLut","Array","length","i","invert","swap","correctIdx","rawIdx","height","Math","min","max","round","backgroundColor","inputColor","outputColor","midColor","topColor","bottomColor","getColorScale","resolution","d3","domain","interpolator","palette","t","Box","left","top","right","bottom","pad","amount","scale","x","y","width","Subnet","order","id","isInput","localX","isOutput","isSubOutput","isTerminal","globalX","globalY","localY","topSubnet","bottomSubnet","extent","Grid","vertical","screenBox","rootSubnet","xExtent","yExtent","verticalitySwap","xScale","yScale","toScreen","gridX","gridY","swappedX","swappedY","toScreenBox","box","result","yFromScreen","screenX","screenY","benesTwin","k","idx","modulus","EdgeColor","routePermutation","perm","edgeColors","None","verts","netHeight","paths","unexplored","Set","keys","size","root","el","queue","delete","push","Top","atVert","shift","undefined","neighborColor","inputNeighbor","outputNeighbor","neighbor","has","luts","inputIdx","subInputIdx","subRoutings","map","globalIdx","globalPath","edgeColor","idxShift","v","path","BenesNet","_ref","doRouting","bipartiteColors","drawBoxes","dottedLines","numInputs","ref","useRef","setSize","useState","setPerm","marginRight","marginBottom","grid","prevK","setPrevK","_jsx","_Fragment","useLayoutEffect","current","getBoundingClientRect","window","useResizeObserver","entry","contentRect","circles","applyTerminalBias","color","cx","cy","stroke","r","fill","connectButterfly","lines","prefix","isRight","colTop","colBot","colFall","colRise","putLine","postfix","fromX","fromY","toX","toY","x1","y1","x2","y2","strokeOpacity","strokeWidth","benesLines","benesRects","connectBenes","subnet","padAmount","topBox","bottomBox","rx","ry","fillOpacity","subLocalY","butterfly","routingLines","routing","colorScale","pathColor","edgeIdx","lineColor","Bottom","toString","strokeDasharray","children","attributeName","values","dur","calcMode","repeatCount","drawRouting","labels","prescriptions","inputLabels","className","style","transform","KI","drawInputLabels","outputLabels","preimage","outputIdx","drawOutputLabels","svg","_jsxs","type","baseFrequency","numOctaves","stitchTiles","offset","stopColor","stopOpacity","background","flexDirection","PermWidget","onPermChanged","xyToIdx","idxToXY","Main","benesOrder","setBenesOrder","setVertical","setDoRouting","setDrawBoxes","setBipartiteColors","setDottedLines","Splitter","SplitterPanel","target","rel","href","htmlFor","InputNumber","name","value","onValueChange","e","val","isNaN","mode","showButtons","SelectButton","onChange","options","InputSwitch","checked","ReactDOM","document","getElementById","initMacros","render","React","PrimeReactProvider","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","module","__webpack_modules__","m","O","chunkIds","fn","priority","notFulfilled","Infinity","fulfilled","j","Object","every","key","splice","d","definition","o","defineProperty","enumerable","get","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","__webpack_exports__"],"sourceRoot":""}